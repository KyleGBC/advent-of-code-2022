<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="183"><g><title>[ld-2.31.so] (3 samples, 1.64%)</title><rect x="39.3443%" y="341" width="1.6393%" height="15" fill="rgb(175,175,50)" fg:x="72" fg:w="3"/><text x="39.5943%" y="351.50"></text></g><g><title>[ld-2.31.so] (2 samples, 1.09%)</title><rect x="39.8907%" y="325" width="1.0929%" height="15" fill="rgb(175,175,50)" fg:x="73" fg:w="2"/><text x="40.1407%" y="335.50"></text></g><g><title>[ld-2.31.so] (9 samples, 4.92%)</title><rect x="36.6120%" y="357" width="4.9180%" height="15" fill="rgb(221,221,66)" fg:x="67" fg:w="9"/><text x="36.8620%" y="367.50">[ld-2...</text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="40.9836%" y="341" width="0.5464%" height="15" fill="rgb(225,225,68)" fg:x="75" fg:w="1"/><text x="41.2336%" y="351.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="62.8415%" y="277" width="0.5464%" height="15" fill="rgb(191,191,55)" fg:x="115" fg:w="1"/><text x="63.0915%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="62.8415%" y="261" width="0.5464%" height="15" fill="rgb(205,205,61)" fg:x="115" fg:w="1"/><text x="63.0915%" y="271.50"></text></g><g><title>[ld-2.31.so] (22 samples, 12.02%)</title><rect x="53.0055%" y="293" width="12.0219%" height="15" fill="rgb(213,213,63)" fg:x="97" fg:w="22"/><text x="53.2555%" y="303.50">[ld-2.31.so]</text></g><g><title>[unknown] (3 samples, 1.64%)</title><rect x="63.3880%" y="277" width="1.6393%" height="15" fill="rgb(180,180,52)" fg:x="116" fg:w="3"/><text x="63.6380%" y="287.50"></text></g><g><title>[unknown] (2 samples, 1.09%)</title><rect x="65.0273%" y="293" width="1.0929%" height="15" fill="rgb(182,182,52)" fg:x="119" fg:w="2"/><text x="65.2773%" y="303.50"></text></g><g><title>__tunable_get_val (1 samples, 0.55%)</title><rect x="66.1202%" y="293" width="0.5464%" height="15" fill="rgb(204,204,60)" fg:x="121" fg:w="1"/><text x="66.3702%" y="303.50"></text></g><g><title>[ld-2.31.so] (63 samples, 34.43%)</title><rect x="32.7869%" y="421" width="34.4262%" height="15" fill="rgb(229,229,69)" fg:x="60" fg:w="63"/><text x="33.0369%" y="431.50">[ld-2.31.so]</text></g><g><title>[ld-2.31.so] (63 samples, 34.43%)</title><rect x="32.7869%" y="405" width="34.4262%" height="15" fill="rgb(221,221,66)" fg:x="60" fg:w="63"/><text x="33.0369%" y="415.50">[ld-2.31.so]</text></g><g><title>[ld-2.31.so] (63 samples, 34.43%)</title><rect x="32.7869%" y="389" width="34.4262%" height="15" fill="rgb(179,179,51)" fg:x="60" fg:w="63"/><text x="33.0369%" y="399.50">[ld-2.31.so]</text></g><g><title>[ld-2.31.so] (59 samples, 32.24%)</title><rect x="34.9727%" y="373" width="32.2404%" height="15" fill="rgb(219,219,66)" fg:x="64" fg:w="59"/><text x="35.2227%" y="383.50">[ld-2.31.so]</text></g><g><title>_dl_catch_exception (47 samples, 25.68%)</title><rect x="41.5301%" y="357" width="25.6831%" height="15" fill="rgb(224,224,68)" fg:x="76" fg:w="47"/><text x="41.7801%" y="367.50">_dl_catch_exception</text></g><g><title>[ld-2.31.so] (47 samples, 25.68%)</title><rect x="41.5301%" y="341" width="25.6831%" height="15" fill="rgb(192,192,56)" fg:x="76" fg:w="47"/><text x="41.7801%" y="351.50">[ld-2.31.so]</text></g><g><title>[ld-2.31.so] (46 samples, 25.14%)</title><rect x="42.0765%" y="325" width="25.1366%" height="15" fill="rgb(179,179,51)" fg:x="77" fg:w="46"/><text x="42.3265%" y="335.50">[ld-2.31.so]</text></g><g><title>[ld-2.31.so] (44 samples, 24.04%)</title><rect x="43.1694%" y="309" width="24.0437%" height="15" fill="rgb(182,182,52)" fg:x="79" fg:w="44"/><text x="43.4194%" y="319.50">[ld-2.31.so]</text></g><g><title>free (1 samples, 0.55%)</title><rect x="66.6667%" y="293" width="0.5464%" height="15" fill="rgb(222,222,67)" fg:x="122" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>[ld-2.31.so] (124 samples, 67.76%)</title><rect x="0.0000%" y="437" width="67.7596%" height="15" fill="rgb(181,181,52)" fg:x="0" fg:w="124"/><text x="0.2500%" y="447.50">[ld-2.31.so]</text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="67.2131%" y="421" width="0.5464%" height="15" fill="rgb(182,182,52)" fg:x="123" fg:w="1"/><text x="67.4631%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="67.7596%" y="437" width="0.5464%" height="15" fill="rgb(218,218,65)" fg:x="124" fg:w="1"/><text x="68.0096%" y="447.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.55%)</title><rect x="67.7596%" y="421" width="0.5464%" height="15" fill="rgb(176,176,50)" fg:x="124" fg:w="1"/><text x="68.0096%" y="431.50"></text></g><g><title>[libgcc_s.so.1] (1 samples, 0.55%)</title><rect x="67.7596%" y="405" width="0.5464%" height="15" fill="rgb(179,179,51)" fg:x="124" fg:w="1"/><text x="68.0096%" y="415.50"></text></g><g><title>[ld-2.31.so] (4 samples, 2.19%)</title><rect x="69.3989%" y="373" width="2.1858%" height="15" fill="rgb(206,206,61)" fg:x="127" fg:w="4"/><text x="69.6489%" y="383.50">[..</text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="71.0383%" y="357" width="0.5464%" height="15" fill="rgb(182,182,52)" fg:x="130" fg:w="1"/><text x="71.2883%" y="367.50"></text></g><g><title>exit (7 samples, 3.83%)</title><rect x="68.3060%" y="405" width="3.8251%" height="15" fill="rgb(201,201,59)" fg:x="125" fg:w="7"/><text x="68.5560%" y="415.50">exit</text></g><g><title>[libc-2.31.so] (6 samples, 3.28%)</title><rect x="68.8525%" y="389" width="3.2787%" height="15" fill="rgb(213,213,63)" fg:x="126" fg:w="6"/><text x="69.1025%" y="399.50">[li..</text></g><g><title>_exit (1 samples, 0.55%)</title><rect x="71.5847%" y="373" width="0.5464%" height="15" fill="rgb(210,210,62)" fg:x="131" fg:w="1"/><text x="71.8347%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.55%)</title><rect x="72.1311%" y="325" width="0.5464%" height="15" fill="rgb(200,100,0)" fg:x="132" fg:w="1"/><text x="72.3811%" y="335.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.55%)</title><rect x="72.1311%" y="309" width="0.5464%" height="15" fill="rgb(219,119,0)" fg:x="132" fg:w="1"/><text x="72.3811%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.55%)</title><rect x="72.1311%" y="293" width="0.5464%" height="15" fill="rgb(214,114,0)" fg:x="132" fg:w="1"/><text x="72.3811%" y="303.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.55%)</title><rect x="72.1311%" y="277" width="0.5464%" height="15" fill="rgb(241,141,0)" fg:x="132" fg:w="1"/><text x="72.3811%" y="287.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.64%)</title><rect x="72.6776%" y="181" width="1.6393%" height="15" fill="rgb(244,144,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.64%)</title><rect x="72.6776%" y="165" width="1.6393%" height="15" fill="rgb(213,113,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="175.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.64%)</title><rect x="72.6776%" y="149" width="1.6393%" height="15" fill="rgb(200,100,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="159.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3 samples, 1.64%)</title><rect x="72.6776%" y="133" width="1.6393%" height="15" fill="rgb(191,91,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 1.64%)</title><rect x="72.6776%" y="117" width="1.6393%" height="15" fill="rgb(244,144,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="127.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 1.64%)</title><rect x="72.6776%" y="101" width="1.6393%" height="15" fill="rgb(237,137,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_aligned (3 samples, 1.64%)</title><rect x="72.6776%" y="85" width="1.6393%" height="15" fill="rgb(241,141,0)" fg:x="133" fg:w="3"/><text x="72.9276%" y="95.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 1.09%)</title><rect x="73.2240%" y="69" width="1.0929%" height="15" fill="rgb(207,107,0)" fg:x="134" fg:w="2"/><text x="73.4740%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.55%)</title><rect x="74.3169%" y="181" width="0.5464%" height="15" fill="rgb(209,109,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="191.50"></text></g><g><title>&lt;i32 as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.55%)</title><rect x="74.3169%" y="165" width="0.5464%" height="15" fill="rgb(74,187,187)" fg:x="136" fg:w="1"/><text x="74.5669%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.55%)</title><rect x="74.3169%" y="149" width="0.5464%" height="15" fill="rgb(222,122,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.55%)</title><rect x="74.3169%" y="133" width="0.5464%" height="15" fill="rgb(248,148,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.55%)</title><rect x="74.3169%" y="117" width="0.5464%" height="15" fill="rgb(217,117,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.55%)</title><rect x="74.3169%" y="101" width="0.5464%" height="15" fill="rgb(229,129,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.55%)</title><rect x="74.3169%" y="85" width="0.5464%" height="15" fill="rgb(244,144,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="95.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.55%)</title><rect x="74.3169%" y="69" width="0.5464%" height="15" fill="rgb(207,107,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.55%)</title><rect x="74.3169%" y="53" width="0.5464%" height="15" fill="rgb(197,97,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.55%)</title><rect x="74.3169%" y="37" width="0.5464%" height="15" fill="rgb(200,100,0)" fg:x="136" fg:w="1"/><text x="74.5669%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 1.09%)</title><rect x="74.8634%" y="181" width="1.0929%" height="15" fill="rgb(250,150,0)" fg:x="137" fg:w="2"/><text x="75.1134%" y="191.50"></text></g><g><title>core::num::from_str_radix (2 samples, 1.09%)</title><rect x="74.8634%" y="165" width="1.0929%" height="15" fill="rgb(224,124,0)" fg:x="137" fg:w="2"/><text x="75.1134%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.55%)</title><rect x="75.9563%" y="117" width="0.5464%" height="15" fill="rgb(229,129,0)" fg:x="139" fg:w="1"/><text x="76.2063%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (1 samples, 0.55%)</title><rect x="75.9563%" y="101" width="0.5464%" height="15" fill="rgb(231,131,0)" fg:x="139" fg:w="1"/><text x="76.2063%" y="111.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.55%)</title><rect x="75.9563%" y="85" width="0.5464%" height="15" fill="rgb(223,123,0)" fg:x="139" fg:w="1"/><text x="76.2063%" y="95.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.55%)</title><rect x="75.9563%" y="69" width="0.5464%" height="15" fill="rgb(231,131,0)" fg:x="139" fg:w="1"/><text x="76.2063%" y="79.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.55%)</title><rect x="75.9563%" y="53" width="0.5464%" height="15" fill="rgb(213,113,0)" fg:x="139" fg:w="1"/><text x="76.2063%" y="63.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.55%)</title><rect x="77.0492%" y="85" width="0.5464%" height="15" fill="rgb(53,167,167)" fg:x="141" fg:w="1"/><text x="77.2992%" y="95.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 5.46%)</title><rect x="72.6776%" y="309" width="5.4645%" height="15" fill="rgb(190,90,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="319.50">std::pa..</text></g><g><title>std::panicking::try (10 samples, 5.46%)</title><rect x="72.6776%" y="293" width="5.4645%" height="15" fill="rgb(203,103,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="303.50">std::pa..</text></g><g><title>std::panicking::try::do_call (10 samples, 5.46%)</title><rect x="72.6776%" y="277" width="5.4645%" height="15" fill="rgb(193,93,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="287.50">std::pa..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 5.46%)</title><rect x="72.6776%" y="261" width="5.4645%" height="15" fill="rgb(254,154,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="271.50">core::o..</text></g><g><title>std::rt::lang_start::{{closure}} (10 samples, 5.46%)</title><rect x="72.6776%" y="245" width="5.4645%" height="15" fill="rgb(231,131,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="255.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 5.46%)</title><rect x="72.6776%" y="229" width="5.4645%" height="15" fill="rgb(209,109,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="239.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 5.46%)</title><rect x="72.6776%" y="213" width="5.4645%" height="15" fill="rgb(217,117,0)" fg:x="133" fg:w="10"/><text x="72.9276%" y="223.50">core::o..</text></g><g><title>day10::main (10 samples, 5.46%)</title><rect x="72.6776%" y="197" width="5.4645%" height="15" fill="rgb(86,198,198)" fg:x="133" fg:w="10"/><text x="72.9276%" y="207.50">day10::..</text></g><g><title>std::io::stdio::_print (4 samples, 2.19%)</title><rect x="75.9563%" y="181" width="2.1858%" height="15" fill="rgb(212,112,0)" fg:x="139" fg:w="4"/><text x="76.2063%" y="191.50">s..</text></g><g><title>std::io::stdio::print_to (4 samples, 2.19%)</title><rect x="75.9563%" y="165" width="2.1858%" height="15" fill="rgb(240,140,0)" fg:x="139" fg:w="4"/><text x="76.2063%" y="175.50">s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 2.19%)</title><rect x="75.9563%" y="149" width="2.1858%" height="15" fill="rgb(207,107,0)" fg:x="139" fg:w="4"/><text x="76.2063%" y="159.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 2.19%)</title><rect x="75.9563%" y="133" width="2.1858%" height="15" fill="rgb(90,201,201)" fg:x="139" fg:w="4"/><text x="76.2063%" y="143.50">&lt;..</text></g><g><title>std::io::Write::write_fmt (3 samples, 1.64%)</title><rect x="76.5027%" y="117" width="1.6393%" height="15" fill="rgb(200,100,0)" fg:x="140" fg:w="3"/><text x="76.7527%" y="127.50"></text></g><g><title>core::fmt::write (3 samples, 1.64%)</title><rect x="76.5027%" y="101" width="1.6393%" height="15" fill="rgb(222,122,0)" fg:x="140" fg:w="3"/><text x="76.7527%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.55%)</title><rect x="77.5956%" y="85" width="0.5464%" height="15" fill="rgb(205,105,0)" fg:x="142" fg:w="1"/><text x="77.8456%" y="95.50"></text></g><g><title>alloc::ffi::c_str::CString::new (1 samples, 0.55%)</title><rect x="78.1421%" y="293" width="0.5464%" height="15" fill="rgb(213,113,0)" fg:x="143" fg:w="1"/><text x="78.3921%" y="303.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.55%)</title><rect x="78.1421%" y="277" width="0.5464%" height="15" fill="rgb(80,193,193)" fg:x="143" fg:w="1"/><text x="78.3921%" y="287.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.55%)</title><rect x="78.1421%" y="261" width="0.5464%" height="15" fill="rgb(202,102,0)" fg:x="143" fg:w="1"/><text x="78.3921%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.55%)</title><rect x="78.1421%" y="245" width="0.5464%" height="15" fill="rgb(200,100,0)" fg:x="143" fg:w="1"/><text x="78.3921%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.55%)</title><rect x="78.1421%" y="229" width="0.5464%" height="15" fill="rgb(249,149,0)" fg:x="143" fg:w="1"/><text x="78.3921%" y="239.50"></text></g><g><title>std::sys::unix::init::sanitize_standard_fds (1 samples, 0.55%)</title><rect x="78.6885%" y="277" width="0.5464%" height="15" fill="rgb(212,112,0)" fg:x="144" fg:w="1"/><text x="78.9385%" y="287.50"></text></g><g><title>__poll (1 samples, 0.55%)</title><rect x="78.6885%" y="261" width="0.5464%" height="15" fill="rgb(198,198,58)" fg:x="144" fg:w="1"/><text x="78.9385%" y="271.50"></text></g><g><title>std::sys::unix::init (2 samples, 1.09%)</title><rect x="78.6885%" y="293" width="1.0929%" height="15" fill="rgb(250,150,0)" fg:x="144" fg:w="2"/><text x="78.9385%" y="303.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::init (1 samples, 0.55%)</title><rect x="79.2350%" y="277" width="0.5464%" height="15" fill="rgb(213,113,0)" fg:x="145" fg:w="1"/><text x="79.4850%" y="287.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.55%)</title><rect x="79.2350%" y="261" width="0.5464%" height="15" fill="rgb(243,143,0)" fg:x="145" fg:w="1"/><text x="79.4850%" y="271.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.55%)</title><rect x="79.2350%" y="245" width="0.5464%" height="15" fill="rgb(250,150,0)" fg:x="145" fg:w="1"/><text x="79.4850%" y="255.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.55%)</title><rect x="79.2350%" y="229" width="0.5464%" height="15" fill="rgb(224,124,0)" fg:x="145" fg:w="1"/><text x="79.4850%" y="239.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.55%)</title><rect x="79.2350%" y="213" width="0.5464%" height="15" fill="rgb(251,151,0)" fg:x="145" fg:w="1"/><text x="79.4850%" y="223.50"></text></g><g><title>__sysconf (1 samples, 0.55%)</title><rect x="79.2350%" y="197" width="0.5464%" height="15" fill="rgb(191,191,55)" fg:x="145" fg:w="1"/><text x="79.4850%" y="207.50"></text></g><g><title>[ld-2.31.so] (5 samples, 2.73%)</title><rect x="79.7814%" y="229" width="2.7322%" height="15" fill="rgb(179,179,51)" fg:x="146" fg:w="5"/><text x="80.0314%" y="239.50">[l..</text></g><g><title>[ld-2.31.so] (4 samples, 2.19%)</title><rect x="80.3279%" y="213" width="2.1858%" height="15" fill="rgb(204,204,60)" fg:x="147" fg:w="4"/><text x="80.5779%" y="223.50">[..</text></g><g><title>[ld-2.31.so] (4 samples, 2.19%)</title><rect x="80.3279%" y="197" width="2.1858%" height="15" fill="rgb(215,215,64)" fg:x="147" fg:w="4"/><text x="80.5779%" y="207.50">[..</text></g><g><title>[ld-2.31.so] (3 samples, 1.64%)</title><rect x="80.8743%" y="181" width="1.6393%" height="15" fill="rgb(214,214,64)" fg:x="148" fg:w="3"/><text x="81.1243%" y="191.50"></text></g><g><title>[ld-2.31.so] (2 samples, 1.09%)</title><rect x="81.4208%" y="165" width="1.0929%" height="15" fill="rgb(226,226,68)" fg:x="149" fg:w="2"/><text x="81.6708%" y="175.50"></text></g><g><title>[ld-2.31.so] (2 samples, 1.09%)</title><rect x="81.4208%" y="149" width="1.0929%" height="15" fill="rgb(202,202,60)" fg:x="149" fg:w="2"/><text x="81.6708%" y="159.50"></text></g><g><title>__isoc99_sscanf (5 samples, 2.73%)</title><rect x="82.5137%" y="229" width="2.7322%" height="15" fill="rgb(198,198,58)" fg:x="151" fg:w="5"/><text x="82.7637%" y="239.50">__..</text></g><g><title>[libc-2.31.so] (5 samples, 2.73%)</title><rect x="82.5137%" y="213" width="2.7322%" height="15" fill="rgb(177,177,50)" fg:x="151" fg:w="5"/><text x="82.7637%" y="223.50">[l..</text></g><g><title>_IO_sputbackc (1 samples, 0.55%)</title><rect x="84.6995%" y="197" width="0.5464%" height="15" fill="rgb(209,209,62)" fg:x="155" fg:w="1"/><text x="84.9495%" y="207.50"></text></g><g><title>__pthread_getaffinity_new (1 samples, 0.55%)</title><rect x="85.2459%" y="229" width="0.5464%" height="15" fill="rgb(198,198,58)" fg:x="156" fg:w="1"/><text x="85.4959%" y="239.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="85.2459%" y="213" width="0.5464%" height="15" fill="rgb(224,224,68)" fg:x="156" fg:w="1"/><text x="85.4959%" y="223.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="85.2459%" y="197" width="0.5464%" height="15" fill="rgb(214,214,64)" fg:x="156" fg:w="1"/><text x="85.4959%" y="207.50"></text></g><g><title>fclose (1 samples, 0.55%)</title><rect x="85.7923%" y="229" width="0.5464%" height="15" fill="rgb(205,205,61)" fg:x="157" fg:w="1"/><text x="86.0423%" y="239.50"></text></g><g><title>_IO_file_close_it (1 samples, 0.55%)</title><rect x="85.7923%" y="213" width="0.5464%" height="15" fill="rgb(179,179,51)" fg:x="157" fg:w="1"/><text x="86.0423%" y="223.50"></text></g><g><title>_IO_file_close (1 samples, 0.55%)</title><rect x="85.7923%" y="197" width="0.5464%" height="15" fill="rgb(200,200,59)" fg:x="157" fg:w="1"/><text x="86.0423%" y="207.50"></text></g><g><title>@plt (1 samples, 0.55%)</title><rect x="86.8852%" y="181" width="0.5464%" height="15" fill="rgb(181,181,52)" fg:x="159" fg:w="1"/><text x="87.1352%" y="191.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.55%)</title><rect x="87.4317%" y="181" width="0.5464%" height="15" fill="rgb(228,228,69)" fg:x="160" fg:w="1"/><text x="87.6817%" y="191.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.55%)</title><rect x="87.4317%" y="165" width="0.5464%" height="15" fill="rgb(180,180,51)" fg:x="160" fg:w="1"/><text x="87.6817%" y="175.50"></text></g><g><title>__default_morecore (1 samples, 0.55%)</title><rect x="87.4317%" y="149" width="0.5464%" height="15" fill="rgb(180,180,52)" fg:x="160" fg:w="1"/><text x="87.6817%" y="159.50"></text></g><g><title>__sbrk (1 samples, 0.55%)</title><rect x="87.4317%" y="133" width="0.5464%" height="15" fill="rgb(176,176,50)" fg:x="160" fg:w="1"/><text x="87.6817%" y="143.50"></text></g><g><title>brk (1 samples, 0.55%)</title><rect x="87.4317%" y="117" width="0.5464%" height="15" fill="rgb(194,194,57)" fg:x="160" fg:w="1"/><text x="87.6817%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="87.4317%" y="101" width="0.5464%" height="15" fill="rgb(191,191,56)" fg:x="160" fg:w="1"/><text x="87.6817%" y="111.50"></text></g><g><title>[libc-2.31.so] (16 samples, 8.74%)</title><rect x="86.3388%" y="213" width="8.7432%" height="15" fill="rgb(191,191,55)" fg:x="158" fg:w="16"/><text x="86.5888%" y="223.50">[libc-2.31.s..</text></g><g><title>[libc-2.31.so] (15 samples, 8.20%)</title><rect x="86.8852%" y="197" width="8.1967%" height="15" fill="rgb(219,219,66)" fg:x="159" fg:w="15"/><text x="87.1352%" y="207.50">[libc-2.31...</text></g><g><title>_dl_addr (13 samples, 7.10%)</title><rect x="87.9781%" y="181" width="7.1038%" height="15" fill="rgb(202,202,59)" fg:x="161" fg:w="13"/><text x="88.2281%" y="191.50">_dl_addr</text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="94.5355%" y="165" width="0.5464%" height="15" fill="rgb(221,221,66)" fg:x="173" fg:w="1"/><text x="94.7855%" y="175.50"></text></g><g><title>fopen (17 samples, 9.29%)</title><rect x="86.3388%" y="229" width="9.2896%" height="15" fill="rgb(200,200,59)" fg:x="158" fg:w="17"/><text x="86.5888%" y="239.50">fopen</text></g><g><title>_IO_file_fopen (1 samples, 0.55%)</title><rect x="95.0820%" y="213" width="0.5464%" height="15" fill="rgb(216,216,65)" fg:x="174" fg:w="1"/><text x="95.3320%" y="223.50"></text></g><g><title>_IO_file_open (1 samples, 0.55%)</title><rect x="95.0820%" y="197" width="0.5464%" height="15" fill="rgb(202,202,59)" fg:x="174" fg:w="1"/><text x="95.3320%" y="207.50"></text></g><g><title>__open64_nocancel (1 samples, 0.55%)</title><rect x="95.0820%" y="181" width="0.5464%" height="15" fill="rgb(213,213,63)" fg:x="174" fg:w="1"/><text x="95.3320%" y="191.50"></text></g><g><title>[libc-2.31.so] (3 samples, 1.64%)</title><rect x="95.6284%" y="213" width="1.6393%" height="15" fill="rgb(216,216,65)" fg:x="175" fg:w="3"/><text x="95.8784%" y="223.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.55%)</title><rect x="97.2678%" y="197" width="0.5464%" height="15" fill="rgb(180,180,52)" fg:x="178" fg:w="1"/><text x="97.5178%" y="207.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.55%)</title><rect x="97.2678%" y="181" width="0.5464%" height="15" fill="rgb(203,203,60)" fg:x="178" fg:w="1"/><text x="97.5178%" y="191.50"></text></g><g><title>__fxstat64 (1 samples, 0.55%)</title><rect x="97.2678%" y="165" width="0.5464%" height="15" fill="rgb(192,192,56)" fg:x="178" fg:w="1"/><text x="97.5178%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.55%)</title><rect x="97.2678%" y="149" width="0.5464%" height="15" fill="rgb(191,191,56)" fg:x="178" fg:w="1"/><text x="97.5178%" y="159.50"></text></g><g><title>std::sys::unix::thread::guard::init (34 samples, 18.58%)</title><rect x="79.7814%" y="293" width="18.5792%" height="15" fill="rgb(225,125,0)" fg:x="146" fg:w="34"/><text x="80.0314%" y="303.50">std::sys::unix::thread::guard..</text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (34 samples, 18.58%)</title><rect x="79.7814%" y="277" width="18.5792%" height="15" fill="rgb(200,100,0)" fg:x="146" fg:w="34"/><text x="80.0314%" y="287.50">std::sys::unix::thread::guard..</text></g><g><title>std::sys::unix::thread::guard::get_stack_start (34 samples, 18.58%)</title><rect x="79.7814%" y="261" width="18.5792%" height="15" fill="rgb(224,124,0)" fg:x="146" fg:w="34"/><text x="80.0314%" y="271.50">std::sys::unix::thread::guard..</text></g><g><title>pthread_getattr_np (34 samples, 18.58%)</title><rect x="79.7814%" y="245" width="18.5792%" height="15" fill="rgb(178,178,51)" fg:x="146" fg:w="34"/><text x="80.0314%" y="255.50">pthread_getattr_np</text></g><g><title>getdelim (5 samples, 2.73%)</title><rect x="95.6284%" y="229" width="2.7322%" height="15" fill="rgb(206,206,61)" fg:x="175" fg:w="5"/><text x="95.8784%" y="239.50">ge..</text></g><g><title>_IO_file_underflow (2 samples, 1.09%)</title><rect x="97.2678%" y="213" width="1.0929%" height="15" fill="rgb(186,186,54)" fg:x="178" fg:w="2"/><text x="97.5178%" y="223.50"></text></g><g><title>_IO_switch_to_get_mode (1 samples, 0.55%)</title><rect x="97.8142%" y="197" width="0.5464%" height="15" fill="rgb(218,218,65)" fg:x="179" fg:w="1"/><text x="98.0642%" y="207.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.55%)</title><rect x="98.3607%" y="197" width="0.5464%" height="15" fill="rgb(178,178,51)" fg:x="180" fg:w="1"/><text x="98.6107%" y="207.50"></text></g><g><title>_start (57 samples, 31.15%)</title><rect x="68.3060%" y="437" width="31.1475%" height="15" fill="rgb(229,229,69)" fg:x="125" fg:w="57"/><text x="68.5560%" y="447.50">_start</text></g><g><title>__libc_start_main (57 samples, 31.15%)</title><rect x="68.3060%" y="421" width="31.1475%" height="15" fill="rgb(188,188,54)" fg:x="125" fg:w="57"/><text x="68.5560%" y="431.50">__libc_start_main</text></g><g><title>main (50 samples, 27.32%)</title><rect x="72.1311%" y="405" width="27.3224%" height="15" fill="rgb(177,177,50)" fg:x="132" fg:w="50"/><text x="72.3811%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (50 samples, 27.32%)</title><rect x="72.1311%" y="389" width="27.3224%" height="15" fill="rgb(206,106,0)" fg:x="132" fg:w="50"/><text x="72.3811%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (50 samples, 27.32%)</title><rect x="72.1311%" y="373" width="27.3224%" height="15" fill="rgb(224,124,0)" fg:x="132" fg:w="50"/><text x="72.3811%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (50 samples, 27.32%)</title><rect x="72.1311%" y="357" width="27.3224%" height="15" fill="rgb(221,121,0)" fg:x="132" fg:w="50"/><text x="72.3811%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (50 samples, 27.32%)</title><rect x="72.1311%" y="341" width="27.3224%" height="15" fill="rgb(195,95,0)" fg:x="132" fg:w="50"/><text x="72.3811%" y="351.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (49 samples, 26.78%)</title><rect x="72.6776%" y="325" width="26.7760%" height="15" fill="rgb(201,101,0)" fg:x="133" fg:w="49"/><text x="72.9276%" y="335.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (39 samples, 21.31%)</title><rect x="78.1421%" y="309" width="21.3115%" height="15" fill="rgb(224,124,0)" fg:x="143" fg:w="39"/><text x="78.3921%" y="319.50">std::rt::init</text></g><g><title>std::sys_common::thread_info::set (2 samples, 1.09%)</title><rect x="98.3607%" y="293" width="1.0929%" height="15" fill="rgb(225,125,0)" fg:x="180" fg:w="2"/><text x="98.6107%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 1.09%)</title><rect x="98.3607%" y="277" width="1.0929%" height="15" fill="rgb(217,117,0)" fg:x="180" fg:w="2"/><text x="98.6107%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.09%)</title><rect x="98.3607%" y="261" width="1.0929%" height="15" fill="rgb(242,142,0)" fg:x="180" fg:w="2"/><text x="98.6107%" y="271.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 1.09%)</title><rect x="98.3607%" y="245" width="1.0929%" height="15" fill="rgb(248,148,0)" fg:x="180" fg:w="2"/><text x="98.6107%" y="255.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (2 samples, 1.09%)</title><rect x="98.3607%" y="229" width="1.0929%" height="15" fill="rgb(246,146,0)" fg:x="180" fg:w="2"/><text x="98.6107%" y="239.50"></text></g><g><title>__cxa_thread_atexit_impl (2 samples, 1.09%)</title><rect x="98.3607%" y="213" width="1.0929%" height="15" fill="rgb(223,223,67)" fg:x="180" fg:w="2"/><text x="98.6107%" y="223.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.55%)</title><rect x="98.9071%" y="197" width="0.5464%" height="15" fill="rgb(186,186,54)" fg:x="181" fg:w="1"/><text x="99.1571%" y="207.50"></text></g><g><title>all (183 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(183,183,53)" fg:x="0" fg:w="183"/><text x="0.2500%" y="479.50"></text></g><g><title>day10 (183 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(182,182,52)" fg:x="0" fg:w="183"/><text x="0.2500%" y="463.50">day10</text></g><g><title>frame_dummy (1 samples, 0.55%)</title><rect x="99.4536%" y="437" width="0.5464%" height="15" fill="rgb(223,223,67)" fg:x="182" fg:w="1"/><text x="99.7036%" y="447.50"></text></g></svg></svg>