<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2982" onload="init(evt)" viewBox="0 0 1200 2982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2965.00"> </text><svg id="frames" x="10" width="1180" total_samples="128"><g><title>[ld-linux-x86-64.so.2] (6 samples, 4.69%)</title><rect x="16.4062%" y="2821" width="4.6875%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="6"/><text x="16.6562%" y="2831.50">[ld-l..</text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 3.91%)</title><rect x="17.1875%" y="2805" width="3.9062%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="5"/><text x="17.4375%" y="2815.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.78%)</title><rect x="20.3125%" y="2789" width="0.7812%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="1"/><text x="20.5625%" y="2799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (13 samples, 10.16%)</title><rect x="12.5000%" y="2837" width="10.1562%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="13"/><text x="12.7500%" y="2847.50">[ld-linux-x86-6..</text></g><g><title>_dl_catch_exception (2 samples, 1.56%)</title><rect x="21.0938%" y="2821" width="1.5625%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="2"/><text x="21.3438%" y="2831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 1.56%)</title><rect x="21.0938%" y="2805" width="1.5625%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="2"/><text x="21.3438%" y="2815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 1.56%)</title><rect x="21.0938%" y="2789" width="1.5625%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="2"/><text x="21.3438%" y="2799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 1.56%)</title><rect x="21.0938%" y="2773" width="1.5625%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="2"/><text x="21.3438%" y="2783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (19 samples, 14.84%)</title><rect x="8.5938%" y="2853" width="14.8438%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="19"/><text x="8.8438%" y="2863.50">[ld-linux-x86-64.so.2]</text></g><g><title>__libc_early_init (1 samples, 0.78%)</title><rect x="22.6562%" y="2837" width="0.7812%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="1"/><text x="22.9062%" y="2847.50"></text></g><g><title>[unknown] (1 samples, 0.78%)</title><rect x="22.6562%" y="2821" width="0.7812%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="1"/><text x="22.9062%" y="2831.50"></text></g><g><title>[unknown] (1 samples, 0.78%)</title><rect x="22.6562%" y="2805" width="0.7812%" height="15" fill="rgb(240,193,28)" fg:x="29" fg:w="1"/><text x="22.9062%" y="2815.50"></text></g><g><title>[unknown] (1 samples, 0.78%)</title><rect x="22.6562%" y="2789" width="0.7812%" height="15" fill="rgb(216,20,37)" fg:x="29" fg:w="1"/><text x="22.9062%" y="2799.50"></text></g><g><title>[unknown] (1 samples, 0.78%)</title><rect x="22.6562%" y="2773" width="0.7812%" height="15" fill="rgb(206,188,39)" fg:x="29" fg:w="1"/><text x="22.9062%" y="2783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (23 samples, 17.97%)</title><rect x="6.2500%" y="2869" width="17.9688%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="23"/><text x="6.5000%" y="2879.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (1 samples, 0.78%)</title><rect x="23.4375%" y="2853" width="0.7812%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="1"/><text x="23.6875%" y="2863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (35 samples, 27.34%)</title><rect x="0.7812%" y="2885" width="27.3438%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="35"/><text x="1.0312%" y="2895.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (5 samples, 3.91%)</title><rect x="24.2188%" y="2869" width="3.9062%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="5"/><text x="24.4688%" y="2879.50">[unk..</text></g><g><title>[ld-linux-x86-64.so.2] (38 samples, 29.69%)</title><rect x="0.0000%" y="2901" width="29.6875%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="38"/><text x="0.2500%" y="2911.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (2 samples, 1.56%)</title><rect x="28.1250%" y="2885" width="1.5625%" height="15" fill="rgb(226,26,5)" fg:x="36" fg:w="2"/><text x="28.3750%" y="2895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="30.4688%" y="2517" width="0.7812%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="30.4688%" y="2501" width="0.7812%" height="15" fill="rgb(235,183,28)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.78%)</title><rect x="30.4688%" y="2485" width="0.7812%" height="15" fill="rgb(221,5,38)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.78%)</title><rect x="30.4688%" y="2469" width="0.7812%" height="15" fill="rgb(247,18,42)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.78%)</title><rect x="30.4688%" y="2453" width="0.7812%" height="15" fill="rgb(241,131,45)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.78%)</title><rect x="30.4688%" y="2437" width="0.7812%" height="15" fill="rgb(249,31,29)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2447.50"></text></g><g><title>malloc (1 samples, 0.78%)</title><rect x="30.4688%" y="2421" width="0.7812%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.78%)</title><rect x="30.4688%" y="2405" width="0.7812%" height="15" fill="rgb(238,160,17)" fg:x="39" fg:w="1"/><text x="30.7188%" y="2415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 1.56%)</title><rect x="30.4688%" y="2629" width="1.5625%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2639.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 1.56%)</title><rect x="30.4688%" y="2613" width="1.5625%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 1.56%)</title><rect x="30.4688%" y="2597" width="1.5625%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 1.56%)</title><rect x="30.4688%" y="2581" width="1.5625%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 1.56%)</title><rect x="30.4688%" y="2565" width="1.5625%" height="15" fill="rgb(213,181,19)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 1.56%)</title><rect x="30.4688%" y="2549" width="1.5625%" height="15" fill="rgb(254,191,54)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.56%)</title><rect x="30.4688%" y="2533" width="1.5625%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="2"/><text x="30.7188%" y="2543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.78%)</title><rect x="31.2500%" y="2517" width="0.7812%" height="15" fill="rgb(233,36,39)" fg:x="40" fg:w="1"/><text x="31.5000%" y="2527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.78%)</title><rect x="31.2500%" y="2501" width="0.7812%" height="15" fill="rgb(226,3,54)" fg:x="40" fg:w="1"/><text x="31.5000%" y="2511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.78%)</title><rect x="31.2500%" y="2485" width="0.7812%" height="15" fill="rgb(245,192,40)" fg:x="40" fg:w="1"/><text x="31.5000%" y="2495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.78%)</title><rect x="32.0312%" y="2629" width="0.7812%" height="15" fill="rgb(238,167,29)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.78%)</title><rect x="32.0312%" y="2613" width="0.7812%" height="15" fill="rgb(232,182,51)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.78%)</title><rect x="32.0312%" y="2597" width="0.7812%" height="15" fill="rgb(231,60,39)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.78%)</title><rect x="32.0312%" y="2581" width="0.7812%" height="15" fill="rgb(208,69,12)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.78%)</title><rect x="32.0312%" y="2565" width="0.7812%" height="15" fill="rgb(235,93,37)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.78%)</title><rect x="32.0312%" y="2549" width="0.7812%" height="15" fill="rgb(213,116,39)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2559.50"></text></g><g><title>core::ptr::write (1 samples, 0.78%)</title><rect x="32.0312%" y="2533" width="0.7812%" height="15" fill="rgb(222,207,29)" fg:x="41" fg:w="1"/><text x="32.2812%" y="2543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 1.56%)</title><rect x="32.8125%" y="2629" width="1.5625%" height="15" fill="rgb(206,96,30)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.56%)</title><rect x="32.8125%" y="2613" width="1.5625%" height="15" fill="rgb(218,138,4)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2623.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.56%)</title><rect x="32.8125%" y="2597" width="1.5625%" height="15" fill="rgb(250,191,14)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.56%)</title><rect x="32.8125%" y="2581" width="1.5625%" height="15" fill="rgb(239,60,40)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2591.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.56%)</title><rect x="32.8125%" y="2565" width="1.5625%" height="15" fill="rgb(206,27,48)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2575.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2 samples, 1.56%)</title><rect x="32.8125%" y="2549" width="1.5625%" height="15" fill="rgb(225,35,8)" fg:x="42" fg:w="2"/><text x="33.0625%" y="2559.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.78%)</title><rect x="33.5938%" y="2533" width="0.7812%" height="15" fill="rgb(250,213,24)" fg:x="43" fg:w="1"/><text x="33.8438%" y="2543.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.78%)</title><rect x="33.5938%" y="2517" width="0.7812%" height="15" fill="rgb(247,123,22)" fg:x="43" fg:w="1"/><text x="33.8438%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,day21::Yell&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2629" width="0.7812%" height="15" fill="rgb(231,138,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,day21::Yell,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2613" width="0.7812%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2597" width="0.7812%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.78%)</title><rect x="34.3750%" y="2581" width="0.7812%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.78%)</title><rect x="34.3750%" y="2565" width="0.7812%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.78%)</title><rect x="34.3750%" y="2549" width="0.7812%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.78%)</title><rect x="34.3750%" y="2533" width="0.7812%" height="15" fill="rgb(227,1,9)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2517" width="0.7812%" height="15" fill="rgb(248,47,43)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2501" width="0.7812%" height="15" fill="rgb(221,10,30)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2485" width="0.7812%" height="15" fill="rgb(210,229,1)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2469" width="0.7812%" height="15" fill="rgb(222,148,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2479.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2453" width="0.7812%" height="15" fill="rgb(234,67,33)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2437" width="0.7812%" height="15" fill="rgb(247,98,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2421" width="0.7812%" height="15" fill="rgb(247,138,52)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2431.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2405" width="0.7812%" height="15" fill="rgb(213,79,30)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2389" width="0.7812%" height="15" fill="rgb(246,177,23)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2373" width="0.7812%" height="15" fill="rgb(230,62,27)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2383.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2357" width="0.7812%" height="15" fill="rgb(216,154,8)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2341" width="0.7812%" height="15" fill="rgb(244,35,45)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2325" width="0.7812%" height="15" fill="rgb(251,115,12)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2335.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2309" width="0.7812%" height="15" fill="rgb(240,54,50)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2293" width="0.7812%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2277" width="0.7812%" height="15" fill="rgb(207,117,47)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2287.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2261" width="0.7812%" height="15" fill="rgb(249,43,39)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2245" width="0.7812%" height="15" fill="rgb(209,38,44)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2229" width="0.7812%" height="15" fill="rgb(236,212,23)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2239.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2213" width="0.7812%" height="15" fill="rgb(242,79,21)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2197" width="0.7812%" height="15" fill="rgb(211,96,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2181" width="0.7812%" height="15" fill="rgb(253,215,40)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2191.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2165" width="0.7812%" height="15" fill="rgb(211,81,21)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2149" width="0.7812%" height="15" fill="rgb(208,190,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2133" width="0.7812%" height="15" fill="rgb(235,213,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2143.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2117" width="0.7812%" height="15" fill="rgb(237,122,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2101" width="0.7812%" height="15" fill="rgb(244,218,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2111.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2085" width="0.7812%" height="15" fill="rgb(240,68,47)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2095.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2069" width="0.7812%" height="15" fill="rgb(210,16,53)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2079.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2053" width="0.7812%" height="15" fill="rgb(235,124,12)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2063.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2037" width="0.7812%" height="15" fill="rgb(224,169,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2047.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2021" width="0.7812%" height="15" fill="rgb(250,166,2)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2031.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="2005" width="0.7812%" height="15" fill="rgb(242,216,29)" fg:x="44" fg:w="1"/><text x="34.6250%" y="2015.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1989" width="0.7812%" height="15" fill="rgb(230,116,27)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1999.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1973" width="0.7812%" height="15" fill="rgb(228,99,48)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1983.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1957" width="0.7812%" height="15" fill="rgb(253,11,6)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1967.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1941" width="0.7812%" height="15" fill="rgb(247,143,39)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1951.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1925" width="0.7812%" height="15" fill="rgb(236,97,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1909" width="0.7812%" height="15" fill="rgb(233,208,19)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1893" width="0.7812%" height="15" fill="rgb(216,164,2)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1877" width="0.7812%" height="15" fill="rgb(220,129,5)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1861" width="0.7812%" height="15" fill="rgb(242,17,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1845" width="0.7812%" height="15" fill="rgb(242,107,0)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1829" width="0.7812%" height="15" fill="rgb(251,28,31)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1813" width="0.7812%" height="15" fill="rgb(233,223,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1797" width="0.7812%" height="15" fill="rgb(215,21,27)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1781" width="0.7812%" height="15" fill="rgb(232,23,21)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1765" width="0.7812%" height="15" fill="rgb(244,5,23)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1749" width="0.7812%" height="15" fill="rgb(226,81,46)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1733" width="0.7812%" height="15" fill="rgb(247,70,30)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1717" width="0.7812%" height="15" fill="rgb(212,68,19)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1701" width="0.7812%" height="15" fill="rgb(240,187,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1685" width="0.7812%" height="15" fill="rgb(223,113,26)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1695.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1669" width="0.7812%" height="15" fill="rgb(206,192,2)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1653" width="0.7812%" height="15" fill="rgb(241,108,4)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1637" width="0.7812%" height="15" fill="rgb(247,173,49)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1621" width="0.7812%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1605" width="0.7812%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1589" width="0.7812%" height="15" fill="rgb(245,172,44)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1573" width="0.7812%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1557" width="0.7812%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1541" width="0.7812%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1525" width="0.7812%" height="15" fill="rgb(244,70,9)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1509" width="0.7812%" height="15" fill="rgb(217,125,39)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1493" width="0.7812%" height="15" fill="rgb(235,36,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1477" width="0.7812%" height="15" fill="rgb(251,123,47)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1461" width="0.7812%" height="15" fill="rgb(221,13,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1445" width="0.7812%" height="15" fill="rgb(238,131,9)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1429" width="0.7812%" height="15" fill="rgb(211,50,8)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1413" width="0.7812%" height="15" fill="rgb(245,182,24)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1397" width="0.7812%" height="15" fill="rgb(242,14,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1381" width="0.7812%" height="15" fill="rgb(246,228,12)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1365" width="0.7812%" height="15" fill="rgb(213,55,15)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1349" width="0.7812%" height="15" fill="rgb(209,9,3)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1333" width="0.7812%" height="15" fill="rgb(230,59,30)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1317" width="0.7812%" height="15" fill="rgb(209,121,21)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1301" width="0.7812%" height="15" fill="rgb(220,109,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1285" width="0.7812%" height="15" fill="rgb(232,18,1)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1269" width="0.7812%" height="15" fill="rgb(215,41,42)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1253" width="0.7812%" height="15" fill="rgb(224,123,36)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1237" width="0.7812%" height="15" fill="rgb(240,125,3)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1221" width="0.7812%" height="15" fill="rgb(205,98,50)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1205" width="0.7812%" height="15" fill="rgb(205,185,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1189" width="0.7812%" height="15" fill="rgb(238,207,15)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1173" width="0.7812%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1157" width="0.7812%" height="15" fill="rgb(235,201,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1141" width="0.7812%" height="15" fill="rgb(207,46,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1125" width="0.7812%" height="15" fill="rgb(241,35,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1109" width="0.7812%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1093" width="0.7812%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1077" width="0.7812%" height="15" fill="rgb(219,102,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1061" width="0.7812%" height="15" fill="rgb(243,110,44)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1045" width="0.7812%" height="15" fill="rgb(222,74,54)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1029" width="0.7812%" height="15" fill="rgb(216,99,12)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="1013" width="0.7812%" height="15" fill="rgb(226,22,26)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="997" width="0.7812%" height="15" fill="rgb(217,163,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="981" width="0.7812%" height="15" fill="rgb(213,25,53)" fg:x="44" fg:w="1"/><text x="34.6250%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="965" width="0.7812%" height="15" fill="rgb(252,105,26)" fg:x="44" fg:w="1"/><text x="34.6250%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="949" width="0.7812%" height="15" fill="rgb(220,39,43)" fg:x="44" fg:w="1"/><text x="34.6250%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="933" width="0.7812%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="1"/><text x="34.6250%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="917" width="0.7812%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="1"/><text x="34.6250%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="901" width="0.7812%" height="15" fill="rgb(223,20,43)" fg:x="44" fg:w="1"/><text x="34.6250%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="885" width="0.7812%" height="15" fill="rgb(229,81,49)" fg:x="44" fg:w="1"/><text x="34.6250%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="869" width="0.7812%" height="15" fill="rgb(236,28,36)" fg:x="44" fg:w="1"/><text x="34.6250%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="853" width="0.7812%" height="15" fill="rgb(249,185,26)" fg:x="44" fg:w="1"/><text x="34.6250%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="837" width="0.7812%" height="15" fill="rgb(249,174,33)" fg:x="44" fg:w="1"/><text x="34.6250%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="821" width="0.7812%" height="15" fill="rgb(233,201,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="805" width="0.7812%" height="15" fill="rgb(221,78,26)" fg:x="44" fg:w="1"/><text x="34.6250%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="789" width="0.7812%" height="15" fill="rgb(250,127,30)" fg:x="44" fg:w="1"/><text x="34.6250%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="773" width="0.7812%" height="15" fill="rgb(230,49,44)" fg:x="44" fg:w="1"/><text x="34.6250%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="757" width="0.7812%" height="15" fill="rgb(229,67,23)" fg:x="44" fg:w="1"/><text x="34.6250%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="741" width="0.7812%" height="15" fill="rgb(249,83,47)" fg:x="44" fg:w="1"/><text x="34.6250%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="725" width="0.7812%" height="15" fill="rgb(215,43,3)" fg:x="44" fg:w="1"/><text x="34.6250%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="709" width="0.7812%" height="15" fill="rgb(238,154,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="693" width="0.7812%" height="15" fill="rgb(219,56,2)" fg:x="44" fg:w="1"/><text x="34.6250%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="677" width="0.7812%" height="15" fill="rgb(233,0,4)" fg:x="44" fg:w="1"/><text x="34.6250%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="661" width="0.7812%" height="15" fill="rgb(235,30,7)" fg:x="44" fg:w="1"/><text x="34.6250%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="645" width="0.7812%" height="15" fill="rgb(250,79,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="629" width="0.7812%" height="15" fill="rgb(211,146,34)" fg:x="44" fg:w="1"/><text x="34.6250%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="613" width="0.7812%" height="15" fill="rgb(228,22,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="597" width="0.7812%" height="15" fill="rgb(235,168,5)" fg:x="44" fg:w="1"/><text x="34.6250%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="581" width="0.7812%" height="15" fill="rgb(221,155,16)" fg:x="44" fg:w="1"/><text x="34.6250%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="565" width="0.7812%" height="15" fill="rgb(215,215,53)" fg:x="44" fg:w="1"/><text x="34.6250%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="549" width="0.7812%" height="15" fill="rgb(223,4,10)" fg:x="44" fg:w="1"/><text x="34.6250%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="533" width="0.7812%" height="15" fill="rgb(234,103,6)" fg:x="44" fg:w="1"/><text x="34.6250%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="517" width="0.7812%" height="15" fill="rgb(227,97,0)" fg:x="44" fg:w="1"/><text x="34.6250%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="501" width="0.7812%" height="15" fill="rgb(234,150,53)" fg:x="44" fg:w="1"/><text x="34.6250%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="485" width="0.7812%" height="15" fill="rgb(228,201,54)" fg:x="44" fg:w="1"/><text x="34.6250%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="469" width="0.7812%" height="15" fill="rgb(222,22,37)" fg:x="44" fg:w="1"/><text x="34.6250%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="453" width="0.7812%" height="15" fill="rgb(237,53,32)" fg:x="44" fg:w="1"/><text x="34.6250%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="437" width="0.7812%" height="15" fill="rgb(233,25,53)" fg:x="44" fg:w="1"/><text x="34.6250%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="421" width="0.7812%" height="15" fill="rgb(210,40,34)" fg:x="44" fg:w="1"/><text x="34.6250%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="405" width="0.7812%" height="15" fill="rgb(241,220,44)" fg:x="44" fg:w="1"/><text x="34.6250%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="389" width="0.7812%" height="15" fill="rgb(235,28,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="373" width="0.7812%" height="15" fill="rgb(210,56,17)" fg:x="44" fg:w="1"/><text x="34.6250%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="357" width="0.7812%" height="15" fill="rgb(224,130,29)" fg:x="44" fg:w="1"/><text x="34.6250%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="341" width="0.7812%" height="15" fill="rgb(235,212,8)" fg:x="44" fg:w="1"/><text x="34.6250%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="325" width="0.7812%" height="15" fill="rgb(223,33,50)" fg:x="44" fg:w="1"/><text x="34.6250%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="309" width="0.7812%" height="15" fill="rgb(219,149,13)" fg:x="44" fg:w="1"/><text x="34.6250%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="293" width="0.7812%" height="15" fill="rgb(250,156,29)" fg:x="44" fg:w="1"/><text x="34.6250%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="277" width="0.7812%" height="15" fill="rgb(216,193,19)" fg:x="44" fg:w="1"/><text x="34.6250%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="261" width="0.7812%" height="15" fill="rgb(216,135,14)" fg:x="44" fg:w="1"/><text x="34.6250%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="245" width="0.7812%" height="15" fill="rgb(241,47,5)" fg:x="44" fg:w="1"/><text x="34.6250%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="229" width="0.7812%" height="15" fill="rgb(233,42,35)" fg:x="44" fg:w="1"/><text x="34.6250%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="213" width="0.7812%" height="15" fill="rgb(231,13,6)" fg:x="44" fg:w="1"/><text x="34.6250%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="197" width="0.7812%" height="15" fill="rgb(207,181,40)" fg:x="44" fg:w="1"/><text x="34.6250%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="181" width="0.7812%" height="15" fill="rgb(254,173,49)" fg:x="44" fg:w="1"/><text x="34.6250%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="165" width="0.7812%" height="15" fill="rgb(221,1,38)" fg:x="44" fg:w="1"/><text x="34.6250%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="149" width="0.7812%" height="15" fill="rgb(206,124,46)" fg:x="44" fg:w="1"/><text x="34.6250%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="133" width="0.7812%" height="15" fill="rgb(249,21,11)" fg:x="44" fg:w="1"/><text x="34.6250%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="117" width="0.7812%" height="15" fill="rgb(222,201,40)" fg:x="44" fg:w="1"/><text x="34.6250%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="101" width="0.7812%" height="15" fill="rgb(235,61,29)" fg:x="44" fg:w="1"/><text x="34.6250%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(day21::Yell,day21::Op,day21::Yell)&gt;&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="85" width="0.7812%" height="15" fill="rgb(219,207,3)" fg:x="44" fg:w="1"/><text x="34.6250%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day21::Yell,day21::Op,day21::Yell)&gt; (1 samples, 0.78%)</title><rect x="34.3750%" y="69" width="0.7812%" height="15" fill="rgb(222,56,46)" fg:x="44" fg:w="1"/><text x="34.6250%" y="79.50"></text></g><g><title>free (1 samples, 0.78%)</title><rect x="34.3750%" y="53" width="0.7812%" height="15" fill="rgb(239,76,54)" fg:x="44" fg:w="1"/><text x="34.6250%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.78%)</title><rect x="34.3750%" y="37" width="0.7812%" height="15" fill="rgb(231,124,27)" fg:x="44" fg:w="1"/><text x="34.6250%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (1 samples, 0.78%)</title><rect x="35.1562%" y="2629" width="0.7812%" height="15" fill="rgb(249,195,6)" fg:x="45" fg:w="1"/><text x="35.4062%" y="2639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.78%)</title><rect x="35.1562%" y="2613" width="0.7812%" height="15" fill="rgb(237,174,47)" fg:x="45" fg:w="1"/><text x="35.4062%" y="2623.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.78%)</title><rect x="35.1562%" y="2597" width="0.7812%" height="15" fill="rgb(206,201,31)" fg:x="45" fg:w="1"/><text x="35.4062%" y="2607.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2 samples, 1.56%)</title><rect x="35.9375%" y="2613" width="1.5625%" height="15" fill="rgb(231,57,52)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 1.56%)</title><rect x="35.9375%" y="2597" width="1.5625%" height="15" fill="rgb(248,177,22)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2607.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 1.56%)</title><rect x="35.9375%" y="2581" width="1.5625%" height="15" fill="rgb(215,211,37)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.56%)</title><rect x="35.9375%" y="2565" width="1.5625%" height="15" fill="rgb(241,128,51)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.56%)</title><rect x="35.9375%" y="2549" width="1.5625%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2559.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.56%)</title><rect x="35.9375%" y="2533" width="1.5625%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (2 samples, 1.56%)</title><rect x="35.9375%" y="2517" width="1.5625%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2527.50"></text></g><g><title>day21::Yell::from_str::{{closure}} (2 samples, 1.56%)</title><rect x="35.9375%" y="2501" width="1.5625%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_numeric (2 samples, 1.56%)</title><rect x="35.9375%" y="2485" width="1.5625%" height="15" fill="rgb(243,35,44)" fg:x="46" fg:w="2"/><text x="36.1875%" y="2495.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.78%)</title><rect x="37.5000%" y="2613" width="0.7812%" height="15" fill="rgb(246,89,9)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2623.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.78%)</title><rect x="37.5000%" y="2597" width="0.7812%" height="15" fill="rgb(233,213,13)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2607.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.78%)</title><rect x="37.5000%" y="2581" width="0.7812%" height="15" fill="rgb(233,141,41)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2591.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.78%)</title><rect x="37.5000%" y="2565" width="0.7812%" height="15" fill="rgb(239,167,4)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.78%)</title><rect x="37.5000%" y="2549" width="0.7812%" height="15" fill="rgb(209,217,16)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.78%)</title><rect x="37.5000%" y="2533" width="0.7812%" height="15" fill="rgb(219,88,35)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.78%)</title><rect x="37.5000%" y="2517" width="0.7812%" height="15" fill="rgb(220,193,23)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.78%)</title><rect x="37.5000%" y="2501" width="0.7812%" height="15" fill="rgb(230,90,52)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="37.5000%" y="2485" width="0.7812%" height="15" fill="rgb(252,106,19)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="37.5000%" y="2469" width="0.7812%" height="15" fill="rgb(206,74,20)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.78%)</title><rect x="37.5000%" y="2453" width="0.7812%" height="15" fill="rgb(230,138,44)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.78%)</title><rect x="37.5000%" y="2437" width="0.7812%" height="15" fill="rgb(235,182,43)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.78%)</title><rect x="37.5000%" y="2421" width="0.7812%" height="15" fill="rgb(242,16,51)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.78%)</title><rect x="37.5000%" y="2405" width="0.7812%" height="15" fill="rgb(248,9,4)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2415.50"></text></g><g><title>malloc (1 samples, 0.78%)</title><rect x="37.5000%" y="2389" width="0.7812%" height="15" fill="rgb(210,31,22)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.78%)</title><rect x="37.5000%" y="2373" width="0.7812%" height="15" fill="rgb(239,54,39)" fg:x="48" fg:w="1"/><text x="37.7500%" y="2383.50"></text></g><g><title>day21::Yell::from_str (4 samples, 3.12%)</title><rect x="35.9375%" y="2629" width="3.1250%" height="15" fill="rgb(230,99,41)" fg:x="46" fg:w="4"/><text x="36.1875%" y="2639.50">day..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.78%)</title><rect x="38.2812%" y="2613" width="0.7812%" height="15" fill="rgb(253,106,12)" fg:x="49" fg:w="1"/><text x="38.5312%" y="2623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.78%)</title><rect x="38.2812%" y="2597" width="0.7812%" height="15" fill="rgb(213,46,41)" fg:x="49" fg:w="1"/><text x="38.5312%" y="2607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.78%)</title><rect x="38.2812%" y="2581" width="0.7812%" height="15" fill="rgb(215,133,35)" fg:x="49" fg:w="1"/><text x="38.5312%" y="2591.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (2 samples, 1.56%)</title><rect x="42.9688%" y="2613" width="1.5625%" height="15" fill="rgb(213,28,5)" fg:x="55" fg:w="2"/><text x="43.2188%" y="2623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 1.56%)</title><rect x="42.9688%" y="2597" width="1.5625%" height="15" fill="rgb(215,77,49)" fg:x="55" fg:w="2"/><text x="43.2188%" y="2607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.78%)</title><rect x="44.5312%" y="2613" width="0.7812%" height="15" fill="rgb(248,100,22)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.78%)</title><rect x="44.5312%" y="2597" width="0.7812%" height="15" fill="rgb(208,67,9)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.78%)</title><rect x="44.5312%" y="2581" width="0.7812%" height="15" fill="rgb(219,133,21)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.78%)</title><rect x="44.5312%" y="2565" width="0.7812%" height="15" fill="rgb(246,46,29)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.78%)</title><rect x="44.5312%" y="2549" width="0.7812%" height="15" fill="rgb(246,185,52)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="44.5312%" y="2533" width="0.7812%" height="15" fill="rgb(252,136,11)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.78%)</title><rect x="44.5312%" y="2517" width="0.7812%" height="15" fill="rgb(219,138,53)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.78%)</title><rect x="44.5312%" y="2501" width="0.7812%" height="15" fill="rgb(211,51,23)" fg:x="57" fg:w="1"/><text x="44.7812%" y="2511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 1.56%)</title><rect x="45.3125%" y="2613" width="1.5625%" height="15" fill="rgb(247,221,28)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2623.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 1.56%)</title><rect x="45.3125%" y="2597" width="1.5625%" height="15" fill="rgb(251,222,45)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.56%)</title><rect x="45.3125%" y="2581" width="1.5625%" height="15" fill="rgb(217,162,53)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.56%)</title><rect x="45.3125%" y="2565" width="1.5625%" height="15" fill="rgb(229,93,14)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2575.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.56%)</title><rect x="45.3125%" y="2549" width="1.5625%" height="15" fill="rgb(209,67,49)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2559.50"></text></g><g><title>malloc (2 samples, 1.56%)</title><rect x="45.3125%" y="2533" width="1.5625%" height="15" fill="rgb(213,87,29)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2543.50"></text></g><g><title>[libc.so.6] (2 samples, 1.56%)</title><rect x="45.3125%" y="2517" width="1.5625%" height="15" fill="rgb(205,151,52)" fg:x="58" fg:w="2"/><text x="45.5625%" y="2527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.78%)</title><rect x="46.0938%" y="2501" width="0.7812%" height="15" fill="rgb(253,215,39)" fg:x="59" fg:w="1"/><text x="46.3438%" y="2511.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 1.56%)</title><rect x="52.3438%" y="2581" width="1.5625%" height="15" fill="rgb(221,220,41)" fg:x="67" fg:w="2"/><text x="52.5938%" y="2591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.56%)</title><rect x="52.3438%" y="2565" width="1.5625%" height="15" fill="rgb(218,133,21)" fg:x="67" fg:w="2"/><text x="52.5938%" y="2575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 1.56%)</title><rect x="52.3438%" y="2549" width="1.5625%" height="15" fill="rgb(221,193,43)" fg:x="67" fg:w="2"/><text x="52.5938%" y="2559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (17 samples, 13.28%)</title><rect x="46.8750%" y="2613" width="13.2812%" height="15" fill="rgb(240,128,52)" fg:x="60" fg:w="17"/><text x="47.1250%" y="2623.50">std::collections::ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 9.38%)</title><rect x="50.7812%" y="2597" width="9.3750%" height="15" fill="rgb(253,114,12)" fg:x="65" fg:w="12"/><text x="51.0312%" y="2607.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 6.25%)</title><rect x="53.9062%" y="2581" width="6.2500%" height="15" fill="rgb(215,223,47)" fg:x="69" fg:w="8"/><text x="54.1562%" y="2591.50">hashbrow..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7 samples, 5.47%)</title><rect x="54.6875%" y="2565" width="5.4688%" height="15" fill="rgb(248,225,23)" fg:x="70" fg:w="7"/><text x="54.9375%" y="2575.50">hashbro..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7 samples, 5.47%)</title><rect x="54.6875%" y="2549" width="5.4688%" height="15" fill="rgb(250,108,0)" fg:x="70" fg:w="7"/><text x="54.9375%" y="2559.50">core::p..</text></g><g><title>core::ptr::write (7 samples, 5.47%)</title><rect x="54.6875%" y="2533" width="5.4688%" height="15" fill="rgb(228,208,7)" fg:x="70" fg:w="7"/><text x="54.9375%" y="2543.50">core::p..</text></g><g><title>__rust_dealloc (1 samples, 0.78%)</title><rect x="61.7188%" y="2485" width="0.7812%" height="15" fill="rgb(244,45,10)" fg:x="79" fg:w="1"/><text x="61.9688%" y="2495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 1.56%)</title><rect x="61.7188%" y="2581" width="1.5625%" height="15" fill="rgb(207,125,25)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 1.56%)</title><rect x="61.7188%" y="2565" width="1.5625%" height="15" fill="rgb(210,195,18)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 1.56%)</title><rect x="61.7188%" y="2549" width="1.5625%" height="15" fill="rgb(249,80,12)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.56%)</title><rect x="61.7188%" y="2533" width="1.5625%" height="15" fill="rgb(221,65,9)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 1.56%)</title><rect x="61.7188%" y="2517" width="1.5625%" height="15" fill="rgb(235,49,36)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2527.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 1.56%)</title><rect x="61.7188%" y="2501" width="1.5625%" height="15" fill="rgb(225,32,20)" fg:x="79" fg:w="2"/><text x="61.9688%" y="2511.50"></text></g><g><title>free (1 samples, 0.78%)</title><rect x="62.5000%" y="2485" width="0.7812%" height="15" fill="rgb(215,141,46)" fg:x="80" fg:w="1"/><text x="62.7500%" y="2495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.78%)</title><rect x="66.4062%" y="2485" width="0.7812%" height="15" fill="rgb(250,160,47)" fg:x="85" fg:w="1"/><text x="66.6562%" y="2495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 3.12%)</title><rect x="71.0938%" y="2469" width="3.1250%" height="15" fill="rgb(216,222,40)" fg:x="91" fg:w="4"/><text x="71.3438%" y="2479.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 10.16%)</title><rect x="64.8438%" y="2533" width="10.1562%" height="15" fill="rgb(234,217,39)" fg:x="83" fg:w="13"/><text x="65.0938%" y="2543.50">&lt;std::collectio..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 10.16%)</title><rect x="64.8438%" y="2517" width="10.1562%" height="15" fill="rgb(207,178,40)" fg:x="83" fg:w="13"/><text x="65.0938%" y="2527.50">&lt;core::hash::si..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 10.16%)</title><rect x="64.8438%" y="2501" width="10.1562%" height="15" fill="rgb(221,136,13)" fg:x="83" fg:w="13"/><text x="65.0938%" y="2511.50">&lt;core::hash::si..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 7.81%)</title><rect x="67.1875%" y="2485" width="7.8125%" height="15" fill="rgb(249,199,10)" fg:x="86" fg:w="10"/><text x="67.4375%" y="2495.50">&lt;core::hash..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.78%)</title><rect x="74.2188%" y="2469" width="0.7812%" height="15" fill="rgb(249,222,13)" fg:x="95" fg:w="1"/><text x="74.4688%" y="2479.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.78%)</title><rect x="75.0000%" y="2533" width="0.7812%" height="15" fill="rgb(244,185,38)" fg:x="96" fg:w="1"/><text x="75.2500%" y="2543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.78%)</title><rect x="77.3438%" y="2437" width="0.7812%" height="15" fill="rgb(236,202,9)" fg:x="99" fg:w="1"/><text x="77.5938%" y="2447.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.78%)</title><rect x="77.3438%" y="2421" width="0.7812%" height="15" fill="rgb(250,229,37)" fg:x="99" fg:w="1"/><text x="77.5938%" y="2431.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 17.19%)</title><rect x="63.2812%" y="2565" width="17.1875%" height="15" fill="rgb(206,174,23)" fg:x="81" fg:w="22"/><text x="63.5312%" y="2575.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 15.62%)</title><rect x="64.8438%" y="2549" width="15.6250%" height="15" fill="rgb(211,33,43)" fg:x="83" fg:w="20"/><text x="65.0938%" y="2559.50">core::hash::BuildHasher:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 4.69%)</title><rect x="75.7812%" y="2533" width="4.6875%" height="15" fill="rgb(245,58,50)" fg:x="97" fg:w="6"/><text x="76.0312%" y="2543.50">core:..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 3.12%)</title><rect x="77.3438%" y="2517" width="3.1250%" height="15" fill="rgb(244,68,36)" fg:x="99" fg:w="4"/><text x="77.5938%" y="2527.50">&lt;al..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 3.12%)</title><rect x="77.3438%" y="2501" width="3.1250%" height="15" fill="rgb(232,229,15)" fg:x="99" fg:w="4"/><text x="77.5938%" y="2511.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 3.12%)</title><rect x="77.3438%" y="2485" width="3.1250%" height="15" fill="rgb(254,30,23)" fg:x="99" fg:w="4"/><text x="77.5938%" y="2495.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 3.12%)</title><rect x="77.3438%" y="2469" width="3.1250%" height="15" fill="rgb(235,160,14)" fg:x="99" fg:w="4"/><text x="77.5938%" y="2479.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 3.12%)</title><rect x="77.3438%" y="2453" width="3.1250%" height="15" fill="rgb(212,155,44)" fg:x="99" fg:w="4"/><text x="77.5938%" y="2463.50">&lt;co..</text></g><g><title>core::hash::Hasher::write_u8 (3 samples, 2.34%)</title><rect x="78.1250%" y="2437" width="2.3438%" height="15" fill="rgb(226,2,50)" fg:x="100" fg:w="3"/><text x="78.3750%" y="2447.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 2.34%)</title><rect x="78.1250%" y="2421" width="2.3438%" height="15" fill="rgb(234,177,6)" fg:x="100" fg:w="3"/><text x="78.3750%" y="2431.50">&lt;..</text></g><g><title>core::cmp::min (1 samples, 0.78%)</title><rect x="79.6875%" y="2405" width="0.7812%" height="15" fill="rgb(217,24,9)" fg:x="102" fg:w="1"/><text x="79.9375%" y="2415.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.78%)</title><rect x="79.6875%" y="2389" width="0.7812%" height="15" fill="rgb(220,13,46)" fg:x="102" fg:w="1"/><text x="79.9375%" y="2399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 2.34%)</title><rect x="89.0625%" y="2517" width="2.3438%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2527.50">h..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 2.34%)</title><rect x="89.0625%" y="2501" width="2.3438%" height="15" fill="rgb(222,198,25)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2511.50">h..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 2.34%)</title><rect x="89.0625%" y="2485" width="2.3438%" height="15" fill="rgb(211,99,13)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2495.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 2.34%)</title><rect x="89.0625%" y="2469" width="2.3438%" height="15" fill="rgb(232,111,31)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2479.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 2.34%)</title><rect x="89.0625%" y="2453" width="2.3438%" height="15" fill="rgb(245,82,37)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2463.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 2.34%)</title><rect x="89.0625%" y="2437" width="2.3438%" height="15" fill="rgb(227,149,46)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2447.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 2.34%)</title><rect x="89.0625%" y="2421" width="2.3438%" height="15" fill="rgb(218,36,50)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2431.50">&lt;..</text></g><g><title>[libc.so.6] (3 samples, 2.34%)</title><rect x="89.0625%" y="2405" width="2.3438%" height="15" fill="rgb(226,80,48)" fg:x="114" fg:w="3"/><text x="89.3125%" y="2415.50">[..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 8.59%)</title><rect x="83.5938%" y="2549" width="8.5938%" height="15" fill="rgb(238,224,15)" fg:x="107" fg:w="11"/><text x="83.8438%" y="2559.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 8.59%)</title><rect x="83.5938%" y="2533" width="8.5938%" height="15" fill="rgb(241,136,10)" fg:x="107" fg:w="11"/><text x="83.8438%" y="2543.50">hashbrown::r..</text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.78%)</title><rect x="91.4062%" y="2517" width="0.7812%" height="15" fill="rgb(208,32,45)" fg:x="117" fg:w="1"/><text x="91.6562%" y="2527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.78%)</title><rect x="91.4062%" y="2501" width="0.7812%" height="15" fill="rgb(207,135,9)" fg:x="117" fg:w="1"/><text x="91.6562%" y="2511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.78%)</title><rect x="91.4062%" y="2485" width="0.7812%" height="15" fill="rgb(206,86,44)" fg:x="117" fg:w="1"/><text x="91.6562%" y="2495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (2 samples, 1.56%)</title><rect x="92.1875%" y="2533" width="1.5625%" height="15" fill="rgb(245,177,15)" fg:x="118" fg:w="2"/><text x="92.4375%" y="2543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (2 samples, 1.56%)</title><rect x="92.1875%" y="2517" width="1.5625%" height="15" fill="rgb(206,64,50)" fg:x="118" fg:w="2"/><text x="92.4375%" y="2527.50"></text></g><g><title>core::ptr::read (2 samples, 1.56%)</title><rect x="92.1875%" y="2501" width="1.5625%" height="15" fill="rgb(234,36,40)" fg:x="118" fg:w="2"/><text x="92.4375%" y="2511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 1.56%)</title><rect x="92.1875%" y="2485" width="1.5625%" height="15" fill="rgb(213,64,8)" fg:x="118" fg:w="2"/><text x="92.4375%" y="2495.50"></text></g><g><title>day21::attach_branches (71 samples, 55.47%)</title><rect x="39.0625%" y="2629" width="55.4688%" height="15" fill="rgb(210,75,36)" fg:x="50" fg:w="71"/><text x="39.3125%" y="2639.50">day21::attach_branches</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (44 samples, 34.38%)</title><rect x="60.1562%" y="2613" width="34.3750%" height="15" fill="rgb(229,88,21)" fg:x="77" fg:w="44"/><text x="60.4062%" y="2623.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (44 samples, 34.38%)</title><rect x="60.1562%" y="2597" width="34.3750%" height="15" fill="rgb(252,204,47)" fg:x="77" fg:w="44"/><text x="60.4062%" y="2607.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (40 samples, 31.25%)</title><rect x="63.2812%" y="2581" width="31.2500%" height="15" fill="rgb(208,77,27)" fg:x="81" fg:w="40"/><text x="63.5312%" y="2591.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (18 samples, 14.06%)</title><rect x="80.4688%" y="2565" width="14.0625%" height="15" fill="rgb(221,76,26)" fg:x="103" fg:w="18"/><text x="80.7188%" y="2575.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (3 samples, 2.34%)</title><rect x="92.1875%" y="2549" width="2.3438%" height="15" fill="rgb(225,139,18)" fg:x="118" fg:w="3"/><text x="92.4375%" y="2559.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.78%)</title><rect x="93.7500%" y="2533" width="0.7812%" height="15" fill="rgb(230,137,11)" fg:x="120" fg:w="1"/><text x="94.0000%" y="2543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::erase (1 samples, 0.78%)</title><rect x="93.7500%" y="2517" width="0.7812%" height="15" fill="rgb(212,28,1)" fg:x="120" fg:w="1"/><text x="94.0000%" y="2527.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.78%)</title><rect x="93.7500%" y="2501" width="0.7812%" height="15" fill="rgb(248,164,17)" fg:x="120" fg:w="1"/><text x="94.0000%" y="2511.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.78%)</title><rect x="93.7500%" y="2485" width="0.7812%" height="15" fill="rgb(222,171,42)" fg:x="120" fg:w="1"/><text x="94.0000%" y="2495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.78%)</title><rect x="93.7500%" y="2469" width="0.7812%" height="15" fill="rgb(243,84,45)" fg:x="120" fg:w="1"/><text x="94.0000%" y="2479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.78%)</title><rect x="96.8750%" y="2469" width="0.7812%" height="15" fill="rgb(252,49,23)" fg:x="124" fg:w="1"/><text x="97.1250%" y="2479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 3.91%)</title><rect x="94.5312%" y="2629" width="3.9062%" height="15" fill="rgb(215,19,7)" fg:x="121" fg:w="5"/><text x="94.7812%" y="2639.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 2.34%)</title><rect x="96.0938%" y="2613" width="2.3438%" height="15" fill="rgb(238,81,41)" fg:x="123" fg:w="3"/><text x="96.3438%" y="2623.50">h..</text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 1.56%)</title><rect x="96.8750%" y="2597" width="1.5625%" height="15" fill="rgb(210,199,37)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.56%)</title><rect x="96.8750%" y="2581" width="1.5625%" height="15" fill="rgb(244,192,49)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 1.56%)</title><rect x="96.8750%" y="2565" width="1.5625%" height="15" fill="rgb(226,211,11)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2575.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 1.56%)</title><rect x="96.8750%" y="2549" width="1.5625%" height="15" fill="rgb(236,162,54)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 1.56%)</title><rect x="96.8750%" y="2533" width="1.5625%" height="15" fill="rgb(220,229,9)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 1.56%)</title><rect x="96.8750%" y="2517" width="1.5625%" height="15" fill="rgb(250,87,22)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 1.56%)</title><rect x="96.8750%" y="2501" width="1.5625%" height="15" fill="rgb(239,43,17)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 1.56%)</title><rect x="96.8750%" y="2485" width="1.5625%" height="15" fill="rgb(231,177,25)" fg:x="124" fg:w="2"/><text x="97.1250%" y="2495.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.78%)</title><rect x="97.6562%" y="2469" width="0.7812%" height="15" fill="rgb(219,179,1)" fg:x="125" fg:w="1"/><text x="97.9062%" y="2479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.78%)</title><rect x="97.6562%" y="2453" width="0.7812%" height="15" fill="rgb(238,219,53)" fg:x="125" fg:w="1"/><text x="97.9062%" y="2463.50"></text></g><g><title>std::panic::catch_unwind (89 samples, 69.53%)</title><rect x="29.6875%" y="2757" width="69.5312%" height="15" fill="rgb(232,167,36)" fg:x="38" fg:w="89"/><text x="29.9375%" y="2767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (89 samples, 69.53%)</title><rect x="29.6875%" y="2741" width="69.5312%" height="15" fill="rgb(244,19,51)" fg:x="38" fg:w="89"/><text x="29.9375%" y="2751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (89 samples, 69.53%)</title><rect x="29.6875%" y="2725" width="69.5312%" height="15" fill="rgb(224,6,22)" fg:x="38" fg:w="89"/><text x="29.9375%" y="2735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (89 samples, 69.53%)</title><rect x="29.6875%" y="2709" width="69.5312%" height="15" fill="rgb(224,145,5)" fg:x="38" fg:w="89"/><text x="29.9375%" y="2719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (89 samples, 69.53%)</title><rect x="29.6875%" y="2693" width="69.5312%" height="15" fill="rgb(234,130,49)" fg:x="38" fg:w="89"/><text x="29.9375%" y="2703.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (88 samples, 68.75%)</title><rect x="30.4688%" y="2677" width="68.7500%" height="15" fill="rgb(254,6,2)" fg:x="39" fg:w="88"/><text x="30.7188%" y="2687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (88 samples, 68.75%)</title><rect x="30.4688%" y="2661" width="68.7500%" height="15" fill="rgb(208,96,46)" fg:x="39" fg:w="88"/><text x="30.7188%" y="2671.50">core::ops::function::FnOnce::call_once</text></g><g><title>day21::main (88 samples, 68.75%)</title><rect x="30.4688%" y="2645" width="68.7500%" height="15" fill="rgb(239,3,39)" fg:x="39" fg:w="88"/><text x="30.7188%" y="2655.50">day21::main</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.78%)</title><rect x="98.4375%" y="2629" width="0.7812%" height="15" fill="rgb(233,210,1)" fg:x="126" fg:w="1"/><text x="98.6875%" y="2639.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.78%)</title><rect x="98.4375%" y="2613" width="0.7812%" height="15" fill="rgb(244,137,37)" fg:x="126" fg:w="1"/><text x="98.6875%" y="2623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.78%)</title><rect x="98.4375%" y="2597" width="0.7812%" height="15" fill="rgb(240,136,2)" fg:x="126" fg:w="1"/><text x="98.6875%" y="2607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.78%)</title><rect x="98.4375%" y="2581" width="0.7812%" height="15" fill="rgb(239,18,37)" fg:x="126" fg:w="1"/><text x="98.6875%" y="2591.50"></text></g><g><title>__clock_gettime (1 samples, 0.78%)</title><rect x="98.4375%" y="2565" width="0.7812%" height="15" fill="rgb(218,185,22)" fg:x="126" fg:w="1"/><text x="98.6875%" y="2575.50"></text></g><g><title>all (128 samples, 100%)</title><rect x="0.0000%" y="2933" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="128"/><text x="0.2500%" y="2943.50"></text></g><g><title>day21 (128 samples, 100.00%)</title><rect x="0.0000%" y="2917" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="128"/><text x="0.2500%" y="2927.50">day21</text></g><g><title>_start (90 samples, 70.31%)</title><rect x="29.6875%" y="2901" width="70.3125%" height="15" fill="rgb(242,56,43)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2911.50">_start</text></g><g><title>__libc_start_main (90 samples, 70.31%)</title><rect x="29.6875%" y="2885" width="70.3125%" height="15" fill="rgb(233,99,24)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2895.50">__libc_start_main</text></g><g><title>[libc.so.6] (90 samples, 70.31%)</title><rect x="29.6875%" y="2869" width="70.3125%" height="15" fill="rgb(234,209,42)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2879.50">[libc.so.6]</text></g><g><title>main (90 samples, 70.31%)</title><rect x="29.6875%" y="2853" width="70.3125%" height="15" fill="rgb(227,7,12)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2863.50">main</text></g><g><title>std::rt::lang_start_internal (90 samples, 70.31%)</title><rect x="29.6875%" y="2837" width="70.3125%" height="15" fill="rgb(245,203,43)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (90 samples, 70.31%)</title><rect x="29.6875%" y="2821" width="70.3125%" height="15" fill="rgb(238,205,33)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (90 samples, 70.31%)</title><rect x="29.6875%" y="2805" width="70.3125%" height="15" fill="rgb(231,56,7)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (90 samples, 70.31%)</title><rect x="29.6875%" y="2789" width="70.3125%" height="15" fill="rgb(244,186,29)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2799.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (90 samples, 70.31%)</title><rect x="29.6875%" y="2773" width="70.3125%" height="15" fill="rgb(234,111,31)" fg:x="38" fg:w="90"/><text x="29.9375%" y="2783.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.78%)</title><rect x="99.2188%" y="2757" width="0.7812%" height="15" fill="rgb(241,149,10)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2767.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.78%)</title><rect x="99.2188%" y="2741" width="0.7812%" height="15" fill="rgb(249,206,44)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2751.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.78%)</title><rect x="99.2188%" y="2725" width="0.7812%" height="15" fill="rgb(251,153,30)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2735.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.78%)</title><rect x="99.2188%" y="2709" width="0.7812%" height="15" fill="rgb(239,152,38)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2719.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.78%)</title><rect x="99.2188%" y="2693" width="0.7812%" height="15" fill="rgb(249,139,47)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2703.50"></text></g><g><title>pthread_attr_init (1 samples, 0.78%)</title><rect x="99.2188%" y="2677" width="0.7812%" height="15" fill="rgb(244,64,35)" fg:x="127" fg:w="1"/><text x="99.4688%" y="2687.50"></text></g></svg></svg>