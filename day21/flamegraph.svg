<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="166"><g><title>[ld-linux-x86-64.so.2] (8 samples, 4.82%)</title><rect x="12.0482%" y="549" width="4.8193%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="8"/><text x="12.2982%" y="559.50">[ld-li..</text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 3.61%)</title><rect x="13.2530%" y="533" width="3.6145%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="6"/><text x="13.5030%" y="543.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="16.2651%" y="517" width="0.6024%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="1"/><text x="16.5151%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.60%)</title><rect x="16.8675%" y="549" width="0.6024%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="1"/><text x="17.1175%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="16.8675%" y="533" width="0.6024%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="1"/><text x="17.1175%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="16.8675%" y="517" width="0.6024%" height="15" fill="rgb(232,128,0)" fg:x="28" fg:w="1"/><text x="17.1175%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="16.8675%" y="501" width="0.6024%" height="15" fill="rgb(207,160,47)" fg:x="28" fg:w="1"/><text x="17.1175%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="16.8675%" y="485" width="0.6024%" height="15" fill="rgb(228,23,34)" fg:x="28" fg:w="1"/><text x="17.1175%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="469" width="0.6024%" height="15" fill="rgb(218,30,26)" fg:x="28" fg:w="1"/><text x="17.1175%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="453" width="0.6024%" height="15" fill="rgb(220,122,19)" fg:x="28" fg:w="1"/><text x="17.1175%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="437" width="0.6024%" height="15" fill="rgb(250,228,42)" fg:x="28" fg:w="1"/><text x="17.1175%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="421" width="0.6024%" height="15" fill="rgb(240,193,28)" fg:x="28" fg:w="1"/><text x="17.1175%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="405" width="0.6024%" height="15" fill="rgb(216,20,37)" fg:x="28" fg:w="1"/><text x="17.1175%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="389" width="0.6024%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="1"/><text x="17.1175%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="16.8675%" y="373" width="0.6024%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="1"/><text x="17.1175%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (13 samples, 7.83%)</title><rect x="10.2410%" y="565" width="7.8313%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="13"/><text x="10.4910%" y="575.50">[ld-linux-x..</text></g><g><title>memcpy (1 samples, 0.60%)</title><rect x="17.4699%" y="549" width="0.6024%" height="15" fill="rgb(225,20,46)" fg:x="29" fg:w="1"/><text x="17.7199%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (19 samples, 11.45%)</title><rect x="7.2289%" y="581" width="11.4458%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="19"/><text x="7.4789%" y="591.50">[ld-linux-x86-64...</text></g><g><title>__tunable_get_val (1 samples, 0.60%)</title><rect x="18.0723%" y="565" width="0.6024%" height="15" fill="rgb(221,200,47)" fg:x="30" fg:w="1"/><text x="18.3223%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (24 samples, 14.46%)</title><rect x="5.4217%" y="597" width="14.4578%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="24"/><text x="5.6717%" y="607.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (2 samples, 1.20%)</title><rect x="18.6747%" y="581" width="1.2048%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="2"/><text x="18.9247%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="19.2771%" y="565" width="0.6024%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="1"/><text x="19.5271%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="19.2771%" y="549" width="0.6024%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="1"/><text x="19.5271%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (35 samples, 21.08%)</title><rect x="0.6024%" y="613" width="21.0843%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="35"/><text x="0.8524%" y="623.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (3 samples, 1.81%)</title><rect x="19.8795%" y="597" width="1.8072%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="3"/><text x="20.1295%" y="607.50">[..</text></g><g><title>[ld-linux-x86-64.so.2] (38 samples, 22.89%)</title><rect x="0.0000%" y="629" width="22.8916%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="38"/><text x="0.2500%" y="639.50">[ld-linux-x86-64.so.2]</text></g><g><title>[unknown] (2 samples, 1.20%)</title><rect x="21.6867%" y="613" width="1.2048%" height="15" fill="rgb(225,111,53)" fg:x="36" fg:w="2"/><text x="21.9367%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="22.8916%" y="629" width="0.6024%" height="15" fill="rgb(238,160,17)" fg:x="38" fg:w="1"/><text x="23.1416%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="22.8916%" y="613" width="0.6024%" height="15" fill="rgb(214,148,48)" fg:x="38" fg:w="1"/><text x="23.1416%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="22.8916%" y="597" width="0.6024%" height="15" fill="rgb(232,36,49)" fg:x="38" fg:w="1"/><text x="23.1416%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="23.4940%" y="597" width="0.6024%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="1"/><text x="23.7440%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="23.4940%" y="581" width="0.6024%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="1"/><text x="23.7440%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="23.4940%" y="565" width="0.6024%" height="15" fill="rgb(213,181,19)" fg:x="39" fg:w="1"/><text x="23.7440%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.60%)</title><rect x="23.4940%" y="549" width="0.6024%" height="15" fill="rgb(254,191,54)" fg:x="39" fg:w="1"/><text x="23.7440%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.60%)</title><rect x="26.5060%" y="277" width="0.6024%" height="15" fill="rgb(241,83,37)" fg:x="44" fg:w="1"/><text x="26.7560%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.60%)</title><rect x="26.5060%" y="261" width="0.6024%" height="15" fill="rgb(233,36,39)" fg:x="44" fg:w="1"/><text x="26.7560%" y="271.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.41%)</title><rect x="25.3012%" y="357" width="2.4096%" height="15" fill="rgb(226,3,54)" fg:x="42" fg:w="4"/><text x="25.5512%" y="367.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.41%)</title><rect x="25.3012%" y="341" width="2.4096%" height="15" fill="rgb(245,192,40)" fg:x="42" fg:w="4"/><text x="25.5512%" y="351.50">&lt;c..</text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.41%)</title><rect x="25.3012%" y="325" width="2.4096%" height="15" fill="rgb(238,167,29)" fg:x="42" fg:w="4"/><text x="25.5512%" y="335.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3 samples, 1.81%)</title><rect x="25.9036%" y="309" width="1.8072%" height="15" fill="rgb(232,182,51)" fg:x="43" fg:w="3"/><text x="26.1536%" y="319.50">c..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 1.81%)</title><rect x="25.9036%" y="293" width="1.8072%" height="15" fill="rgb(231,60,39)" fg:x="43" fg:w="3"/><text x="26.1536%" y="303.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (1 samples, 0.60%)</title><rect x="27.1084%" y="277" width="0.6024%" height="15" fill="rgb(208,69,12)" fg:x="45" fg:w="1"/><text x="27.3584%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.60%)</title><rect x="27.1084%" y="261" width="0.6024%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="1"/><text x="27.3584%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.60%)</title><rect x="27.1084%" y="245" width="0.6024%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="1"/><text x="27.3584%" y="255.50"></text></g><g><title>__rdl_alloc (4 samples, 2.41%)</title><rect x="30.1205%" y="85" width="2.4096%" height="15" fill="rgb(222,207,29)" fg:x="50" fg:w="4"/><text x="30.3705%" y="95.50">__..</text></g><g><title>__rust_alloc (1 samples, 0.60%)</title><rect x="32.5301%" y="85" width="0.6024%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="1"/><text x="32.7801%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 10.24%)</title><rect x="28.3133%" y="261" width="10.2410%" height="15" fill="rgb(218,138,4)" fg:x="47" fg:w="17"/><text x="28.5633%" y="271.50">&lt;alloc::string:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 9.64%)</title><rect x="28.9157%" y="245" width="9.6386%" height="15" fill="rgb(250,191,14)" fg:x="48" fg:w="16"/><text x="29.1657%" y="255.50">&lt;alloc::vec::V..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 9.64%)</title><rect x="28.9157%" y="229" width="9.6386%" height="15" fill="rgb(239,60,40)" fg:x="48" fg:w="16"/><text x="29.1657%" y="239.50">alloc::slice::..</text></g><g><title>alloc::slice::hack::to_vec (16 samples, 9.64%)</title><rect x="28.9157%" y="213" width="9.6386%" height="15" fill="rgb(206,27,48)" fg:x="48" fg:w="16"/><text x="29.1657%" y="223.50">alloc::slice::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 9.64%)</title><rect x="28.9157%" y="197" width="9.6386%" height="15" fill="rgb(225,35,8)" fg:x="48" fg:w="16"/><text x="29.1657%" y="207.50">&lt;T as alloc::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 9.64%)</title><rect x="28.9157%" y="181" width="9.6386%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="16"/><text x="29.1657%" y="191.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 9.64%)</title><rect x="28.9157%" y="165" width="9.6386%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="16"/><text x="29.1657%" y="175.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 9.64%)</title><rect x="28.9157%" y="149" width="9.6386%" height="15" fill="rgb(231,138,38)" fg:x="48" fg:w="16"/><text x="29.1657%" y="159.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 9.64%)</title><rect x="28.9157%" y="133" width="9.6386%" height="15" fill="rgb(231,145,46)" fg:x="48" fg:w="16"/><text x="29.1657%" y="143.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 9.64%)</title><rect x="28.9157%" y="117" width="9.6386%" height="15" fill="rgb(251,118,11)" fg:x="48" fg:w="16"/><text x="29.1657%" y="127.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (16 samples, 9.64%)</title><rect x="28.9157%" y="101" width="9.6386%" height="15" fill="rgb(217,147,25)" fg:x="48" fg:w="16"/><text x="29.1657%" y="111.50">alloc::alloc::..</text></g><g><title>malloc (9 samples, 5.42%)</title><rect x="33.1325%" y="85" width="5.4217%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="9"/><text x="33.3825%" y="95.50">malloc</text></g><g><title>[libc.so.6] (5 samples, 3.01%)</title><rect x="35.5422%" y="69" width="3.0120%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="5"/><text x="35.7922%" y="79.50">[li..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 1.81%)</title><rect x="42.1687%" y="149" width="1.8072%" height="15" fill="rgb(227,1,9)" fg:x="70" fg:w="3"/><text x="42.4187%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 1.81%)</title><rect x="42.1687%" y="133" width="1.8072%" height="15" fill="rgb(248,47,43)" fg:x="70" fg:w="3"/><text x="42.4187%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 1.81%)</title><rect x="42.1687%" y="117" width="1.8072%" height="15" fill="rgb(221,10,30)" fg:x="70" fg:w="3"/><text x="42.4187%" y="127.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 1.81%)</title><rect x="42.1687%" y="101" width="1.8072%" height="15" fill="rgb(210,229,1)" fg:x="70" fg:w="3"/><text x="42.4187%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 1.81%)</title><rect x="42.1687%" y="85" width="1.8072%" height="15" fill="rgb(222,148,37)" fg:x="70" fg:w="3"/><text x="42.4187%" y="95.50">a..</text></g><g><title>alloc::alloc::alloc (3 samples, 1.81%)</title><rect x="42.1687%" y="69" width="1.8072%" height="15" fill="rgb(234,67,33)" fg:x="70" fg:w="3"/><text x="42.4187%" y="79.50">a..</text></g><g><title>malloc (3 samples, 1.81%)</title><rect x="42.1687%" y="53" width="1.8072%" height="15" fill="rgb(247,98,35)" fg:x="70" fg:w="3"/><text x="42.4187%" y="63.50">m..</text></g><g><title>[libc.so.6] (2 samples, 1.20%)</title><rect x="42.7711%" y="37" width="1.2048%" height="15" fill="rgb(247,138,52)" fg:x="71" fg:w="2"/><text x="43.0211%" y="47.50"></text></g><g><title>core::clone::Clone::clone (28 samples, 16.87%)</title><rect x="27.7108%" y="277" width="16.8675%" height="15" fill="rgb(213,79,30)" fg:x="46" fg:w="28"/><text x="27.9608%" y="287.50">core::clone::Clone::clone</text></g><g><title>&lt;day21::Yell as core::clone::Clone&gt;::clone (10 samples, 6.02%)</title><rect x="38.5542%" y="261" width="6.0241%" height="15" fill="rgb(246,177,23)" fg:x="64" fg:w="10"/><text x="38.8042%" y="271.50">&lt;day21::..</text></g><g><title>&lt;day21::YellOp as core::clone::Clone&gt;::clone (8 samples, 4.82%)</title><rect x="39.7590%" y="245" width="4.8193%" height="15" fill="rgb(230,62,27)" fg:x="66" fg:w="8"/><text x="40.0090%" y="255.50">&lt;day21..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 2.41%)</title><rect x="42.1687%" y="229" width="2.4096%" height="15" fill="rgb(216,154,8)" fg:x="70" fg:w="4"/><text x="42.4187%" y="239.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 2.41%)</title><rect x="42.1687%" y="213" width="2.4096%" height="15" fill="rgb(244,35,45)" fg:x="70" fg:w="4"/><text x="42.4187%" y="223.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 2.41%)</title><rect x="42.1687%" y="197" width="2.4096%" height="15" fill="rgb(251,115,12)" fg:x="70" fg:w="4"/><text x="42.4187%" y="207.50">al..</text></g><g><title>alloc::slice::hack::to_vec (4 samples, 2.41%)</title><rect x="42.1687%" y="181" width="2.4096%" height="15" fill="rgb(240,54,50)" fg:x="70" fg:w="4"/><text x="42.4187%" y="191.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 2.41%)</title><rect x="42.1687%" y="165" width="2.4096%" height="15" fill="rgb(233,84,52)" fg:x="70" fg:w="4"/><text x="42.4187%" y="175.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.60%)</title><rect x="43.9759%" y="149" width="0.6024%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="1"/><text x="44.2259%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.60%)</title><rect x="43.9759%" y="133" width="0.6024%" height="15" fill="rgb(249,43,39)" fg:x="73" fg:w="1"/><text x="44.2259%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="43.9759%" y="117" width="0.6024%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="1"/><text x="44.2259%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (55 samples, 33.13%)</title><rect x="27.7108%" y="309" width="33.1325%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="55"/><text x="27.9608%" y="319.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (55 samples, 33.13%)</title><rect x="27.7108%" y="293" width="33.1325%" height="15" fill="rgb(242,79,21)" fg:x="46" fg:w="55"/><text x="27.9608%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (27 samples, 16.27%)</title><rect x="44.5783%" y="277" width="16.2651%" height="15" fill="rgb(211,96,35)" fg:x="74" fg:w="27"/><text x="44.8283%" y="287.50">hashbrown::raw::Bucket&lt;T&gt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (27 samples, 16.27%)</title><rect x="44.5783%" y="261" width="16.2651%" height="15" fill="rgb(253,215,40)" fg:x="74" fg:w="27"/><text x="44.8283%" y="271.50">core::ptr::mut_ptr::&lt;impl..</text></g><g><title>core::ptr::write (27 samples, 16.27%)</title><rect x="44.5783%" y="245" width="16.2651%" height="15" fill="rgb(211,81,21)" fg:x="74" fg:w="27"/><text x="44.8283%" y="255.50">core::ptr::write</text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="60.2410%" y="229" width="0.6024%" height="15" fill="rgb(208,190,38)" fg:x="100" fg:w="1"/><text x="60.4910%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="60.2410%" y="213" width="0.6024%" height="15" fill="rgb(235,213,38)" fg:x="100" fg:w="1"/><text x="60.4910%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="60.2410%" y="197" width="0.6024%" height="15" fill="rgb(237,122,38)" fg:x="100" fg:w="1"/><text x="60.4910%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (64 samples, 38.55%)</title><rect x="27.7108%" y="357" width="38.5542%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="64"/><text x="27.9608%" y="367.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Cl..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (64 samples, 38.55%)</title><rect x="27.7108%" y="341" width="38.5542%" height="15" fill="rgb(240,68,47)" fg:x="46" fg:w="64"/><text x="27.9608%" y="351.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (64 samples, 38.55%)</title><rect x="27.7108%" y="325" width="38.5542%" height="15" fill="rgb(210,16,53)" fg:x="46" fg:w="64"/><text x="27.9608%" y="335.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (9 samples, 5.42%)</title><rect x="60.8434%" y="309" width="5.4217%" height="15" fill="rgb(235,124,12)" fg:x="101" fg:w="9"/><text x="61.0934%" y="319.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (9 samples, 5.42%)</title><rect x="60.8434%" y="293" width="5.4217%" height="15" fill="rgb(224,169,11)" fg:x="101" fg:w="9"/><text x="61.0934%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 5.42%)</title><rect x="60.8434%" y="277" width="5.4217%" height="15" fill="rgb(250,166,2)" fg:x="101" fg:w="9"/><text x="61.0934%" y="287.50">hashbro..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 5.42%)</title><rect x="60.8434%" y="261" width="5.4217%" height="15" fill="rgb(242,216,29)" fg:x="101" fg:w="9"/><text x="61.0934%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 5.42%)</title><rect x="60.8434%" y="245" width="5.4217%" height="15" fill="rgb(230,116,27)" fg:x="101" fg:w="9"/><text x="61.0934%" y="255.50">alloc::..</text></g><g><title>alloc::alloc::alloc (9 samples, 5.42%)</title><rect x="60.8434%" y="229" width="5.4217%" height="15" fill="rgb(228,99,48)" fg:x="101" fg:w="9"/><text x="61.0934%" y="239.50">alloc::..</text></g><g><title>malloc (9 samples, 5.42%)</title><rect x="60.8434%" y="213" width="5.4217%" height="15" fill="rgb(253,11,6)" fg:x="101" fg:w="9"/><text x="61.0934%" y="223.50">malloc</text></g><g><title>[libc.so.6] (9 samples, 5.42%)</title><rect x="60.8434%" y="197" width="5.4217%" height="15" fill="rgb(247,143,39)" fg:x="101" fg:w="9"/><text x="61.0934%" y="207.50">[libc.s..</text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="65.6627%" y="181" width="0.6024%" height="15" fill="rgb(236,97,10)" fg:x="109" fg:w="1"/><text x="65.9127%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.60%)</title><rect x="66.2651%" y="261" width="0.6024%" height="15" fill="rgb(233,208,19)" fg:x="110" fg:w="1"/><text x="66.5151%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.60%)</title><rect x="66.2651%" y="245" width="0.6024%" height="15" fill="rgb(216,164,2)" fg:x="110" fg:w="1"/><text x="66.5151%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.20%)</title><rect x="66.2651%" y="357" width="1.2048%" height="15" fill="rgb(220,129,5)" fg:x="110" fg:w="2"/><text x="66.5151%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.20%)</title><rect x="66.2651%" y="341" width="1.2048%" height="15" fill="rgb(242,17,10)" fg:x="110" fg:w="2"/><text x="66.5151%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.20%)</title><rect x="66.2651%" y="325" width="1.2048%" height="15" fill="rgb(242,107,0)" fg:x="110" fg:w="2"/><text x="66.5151%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 1.20%)</title><rect x="66.2651%" y="309" width="1.2048%" height="15" fill="rgb(251,28,31)" fg:x="110" fg:w="2"/><text x="66.5151%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (2 samples, 1.20%)</title><rect x="66.2651%" y="293" width="1.2048%" height="15" fill="rgb(233,223,10)" fg:x="110" fg:w="2"/><text x="66.5151%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 1.20%)</title><rect x="66.2651%" y="277" width="1.2048%" height="15" fill="rgb(215,21,27)" fg:x="110" fg:w="2"/><text x="66.5151%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.60%)</title><rect x="66.8675%" y="261" width="0.6024%" height="15" fill="rgb(232,23,21)" fg:x="111" fg:w="1"/><text x="67.1175%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (3 samples, 1.81%)</title><rect x="67.4699%" y="357" width="1.8072%" height="15" fill="rgb(244,5,23)" fg:x="112" fg:w="3"/><text x="67.7199%" y="367.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 1.81%)</title><rect x="67.4699%" y="341" width="1.8072%" height="15" fill="rgb(226,81,46)" fg:x="112" fg:w="3"/><text x="67.7199%" y="351.50">c..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.81%)</title><rect x="67.4699%" y="325" width="1.8072%" height="15" fill="rgb(247,70,30)" fg:x="112" fg:w="3"/><text x="67.7199%" y="335.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.81%)</title><rect x="67.4699%" y="309" width="1.8072%" height="15" fill="rgb(212,68,19)" fg:x="112" fg:w="3"/><text x="67.7199%" y="319.50">&lt;..</text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.81%)</title><rect x="67.4699%" y="293" width="1.8072%" height="15" fill="rgb(240,187,13)" fg:x="112" fg:w="3"/><text x="67.7199%" y="303.50">&lt;..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3 samples, 1.81%)</title><rect x="67.4699%" y="277" width="1.8072%" height="15" fill="rgb(223,113,26)" fg:x="112" fg:w="3"/><text x="67.7199%" y="287.50">c..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.60%)</title><rect x="68.6747%" y="261" width="0.6024%" height="15" fill="rgb(206,192,2)" fg:x="114" fg:w="1"/><text x="68.9247%" y="271.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.60%)</title><rect x="68.6747%" y="245" width="0.6024%" height="15" fill="rgb(241,108,4)" fg:x="114" fg:w="1"/><text x="68.9247%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (14 samples, 8.43%)</title><rect x="69.2771%" y="229" width="8.4337%" height="15" fill="rgb(247,173,49)" fg:x="115" fg:w="14"/><text x="69.5271%" y="239.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 8.43%)</title><rect x="69.2771%" y="213" width="8.4337%" height="15" fill="rgb(224,114,35)" fg:x="115" fg:w="14"/><text x="69.5271%" y="223.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 8.43%)</title><rect x="69.2771%" y="197" width="8.4337%" height="15" fill="rgb(245,159,27)" fg:x="115" fg:w="14"/><text x="69.5271%" y="207.50">core::ptr::d..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 8.43%)</title><rect x="69.2771%" y="181" width="8.4337%" height="15" fill="rgb(245,172,44)" fg:x="115" fg:w="14"/><text x="69.5271%" y="191.50">&lt;alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 8.43%)</title><rect x="69.2771%" y="165" width="8.4337%" height="15" fill="rgb(236,23,11)" fg:x="115" fg:w="14"/><text x="69.5271%" y="175.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::dealloc (14 samples, 8.43%)</title><rect x="69.2771%" y="149" width="8.4337%" height="15" fill="rgb(205,117,38)" fg:x="115" fg:w="14"/><text x="69.5271%" y="159.50">alloc::alloc..</text></g><g><title>free (14 samples, 8.43%)</title><rect x="69.2771%" y="133" width="8.4337%" height="15" fill="rgb(237,72,25)" fg:x="115" fg:w="14"/><text x="69.5271%" y="143.50">free</text></g><g><title>[libc.so.6] (10 samples, 6.02%)</title><rect x="71.6867%" y="117" width="6.0241%" height="15" fill="rgb(244,70,9)" fg:x="119" fg:w="10"/><text x="71.9367%" y="127.50">[libc.so..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 10.24%)</title><rect x="69.2771%" y="309" width="10.2410%" height="15" fill="rgb(217,125,39)" fg:x="115" fg:w="17"/><text x="69.5271%" y="319.50">&lt;hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (17 samples, 10.24%)</title><rect x="69.2771%" y="293" width="10.2410%" height="15" fill="rgb(235,36,10)" fg:x="115" fg:w="17"/><text x="69.5271%" y="303.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (17 samples, 10.24%)</title><rect x="69.2771%" y="277" width="10.2410%" height="15" fill="rgb(251,123,47)" fg:x="115" fg:w="17"/><text x="69.5271%" y="287.50">hashbrown::raw:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (17 samples, 10.24%)</title><rect x="69.2771%" y="261" width="10.2410%" height="15" fill="rgb(221,13,13)" fg:x="115" fg:w="17"/><text x="69.5271%" y="271.50">core::ptr::mut_..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,day21::Yell)&gt; (17 samples, 10.24%)</title><rect x="69.2771%" y="245" width="10.2410%" height="15" fill="rgb(238,131,9)" fg:x="115" fg:w="17"/><text x="69.5271%" y="255.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (3 samples, 1.81%)</title><rect x="77.7108%" y="229" width="1.8072%" height="15" fill="rgb(211,50,8)" fg:x="129" fg:w="3"/><text x="77.9608%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;day21::YellOp&gt; (3 samples, 1.81%)</title><rect x="77.7108%" y="213" width="1.8072%" height="15" fill="rgb(245,182,24)" fg:x="129" fg:w="3"/><text x="77.9608%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 1.81%)</title><rect x="77.7108%" y="197" width="1.8072%" height="15" fill="rgb(242,14,37)" fg:x="129" fg:w="3"/><text x="77.9608%" y="207.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 1.81%)</title><rect x="77.7108%" y="181" width="1.8072%" height="15" fill="rgb(246,228,12)" fg:x="129" fg:w="3"/><text x="77.9608%" y="191.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 1.81%)</title><rect x="77.7108%" y="165" width="1.8072%" height="15" fill="rgb(213,55,15)" fg:x="129" fg:w="3"/><text x="77.9608%" y="175.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.81%)</title><rect x="77.7108%" y="149" width="1.8072%" height="15" fill="rgb(209,9,3)" fg:x="129" fg:w="3"/><text x="77.9608%" y="159.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 1.81%)</title><rect x="77.7108%" y="133" width="1.8072%" height="15" fill="rgb(230,59,30)" fg:x="129" fg:w="3"/><text x="77.9608%" y="143.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (3 samples, 1.81%)</title><rect x="77.7108%" y="117" width="1.8072%" height="15" fill="rgb(209,121,21)" fg:x="129" fg:w="3"/><text x="77.9608%" y="127.50">a..</text></g><g><title>free (3 samples, 1.81%)</title><rect x="77.7108%" y="101" width="1.8072%" height="15" fill="rgb(220,109,13)" fg:x="129" fg:w="3"/><text x="77.9608%" y="111.50">f..</text></g><g><title>[libc.so.6] (2 samples, 1.20%)</title><rect x="78.3133%" y="85" width="1.2048%" height="15" fill="rgb(232,18,1)" fg:x="130" fg:w="2"/><text x="78.5633%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,day21::Yell&gt;&gt; (35 samples, 21.08%)</title><rect x="69.2771%" y="357" width="21.0843%" height="15" fill="rgb(215,41,42)" fg:x="115" fg:w="35"/><text x="69.5271%" y="367.50">core::ptr::drop_in_place&lt;std::col..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,day21::Yell,std::collections::hash::map::RandomState&gt;&gt; (35 samples, 21.08%)</title><rect x="69.2771%" y="341" width="21.0843%" height="15" fill="rgb(224,123,36)" fg:x="115" fg:w="35"/><text x="69.5271%" y="351.50">core::ptr::drop_in_place&lt;hashbrow..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,day21::Yell)&gt;&gt; (35 samples, 21.08%)</title><rect x="69.2771%" y="325" width="21.0843%" height="15" fill="rgb(240,125,3)" fg:x="115" fg:w="35"/><text x="69.5271%" y="335.50">core::ptr::drop_in_place&lt;hashbrow..</text></g><g><title>free (18 samples, 10.84%)</title><rect x="79.5181%" y="309" width="10.8434%" height="15" fill="rgb(205,98,50)" fg:x="132" fg:w="18"/><text x="79.7681%" y="319.50">free</text></g><g><title>[libc.so.6] (18 samples, 10.84%)</title><rect x="79.5181%" y="293" width="10.8434%" height="15" fill="rgb(205,185,37)" fg:x="132" fg:w="18"/><text x="79.7681%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (18 samples, 10.84%)</title><rect x="79.5181%" y="277" width="10.8434%" height="15" fill="rgb(238,207,15)" fg:x="132" fg:w="18"/><text x="79.7681%" y="287.50">[libc.so.6]</text></g><g><title>[libc.so.6] (9 samples, 5.42%)</title><rect x="84.9398%" y="261" width="5.4217%" height="15" fill="rgb(213,199,42)" fg:x="141" fg:w="9"/><text x="85.1898%" y="271.50">[libc.s..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.60%)</title><rect x="90.9639%" y="341" width="0.6024%" height="15" fill="rgb(235,201,11)" fg:x="151" fg:w="1"/><text x="91.2139%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.60%)</title><rect x="90.9639%" y="325" width="0.6024%" height="15" fill="rgb(207,46,11)" fg:x="151" fg:w="1"/><text x="91.2139%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.60%)</title><rect x="90.9639%" y="309" width="0.6024%" height="15" fill="rgb(241,35,35)" fg:x="151" fg:w="1"/><text x="91.2139%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.60%)</title><rect x="90.9639%" y="293" width="0.6024%" height="15" fill="rgb(243,32,47)" fg:x="151" fg:w="1"/><text x="91.2139%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.60%)</title><rect x="90.9639%" y="277" width="0.6024%" height="15" fill="rgb(247,202,23)" fg:x="151" fg:w="1"/><text x="91.2139%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.60%)</title><rect x="90.9639%" y="261" width="0.6024%" height="15" fill="rgb(219,102,11)" fg:x="151" fg:w="1"/><text x="91.2139%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.60%)</title><rect x="90.9639%" y="245" width="0.6024%" height="15" fill="rgb(243,110,44)" fg:x="151" fg:w="1"/><text x="91.2139%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.60%)</title><rect x="90.9639%" y="229" width="0.6024%" height="15" fill="rgb(222,74,54)" fg:x="151" fg:w="1"/><text x="91.2139%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.60%)</title><rect x="90.9639%" y="213" width="0.6024%" height="15" fill="rgb(216,99,12)" fg:x="151" fg:w="1"/><text x="91.2139%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.60%)</title><rect x="90.9639%" y="197" width="0.6024%" height="15" fill="rgb(226,22,26)" fg:x="151" fg:w="1"/><text x="91.2139%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.60%)</title><rect x="90.9639%" y="181" width="0.6024%" height="15" fill="rgb(217,163,10)" fg:x="151" fg:w="1"/><text x="91.2139%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.60%)</title><rect x="90.9639%" y="165" width="0.6024%" height="15" fill="rgb(213,25,53)" fg:x="151" fg:w="1"/><text x="91.2139%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.60%)</title><rect x="90.9639%" y="149" width="0.6024%" height="15" fill="rgb(252,105,26)" fg:x="151" fg:w="1"/><text x="91.2139%" y="159.50"></text></g><g><title>malloc (1 samples, 0.60%)</title><rect x="90.9639%" y="133" width="0.6024%" height="15" fill="rgb(220,39,43)" fg:x="151" fg:w="1"/><text x="91.2139%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="90.9639%" y="117" width="0.6024%" height="15" fill="rgb(229,68,48)" fg:x="151" fg:w="1"/><text x="91.2139%" y="127.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1 samples, 0.60%)</title><rect x="92.1687%" y="309" width="0.6024%" height="15" fill="rgb(252,8,32)" fg:x="153" fg:w="1"/><text x="92.4187%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitN&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.81%)</title><rect x="91.5663%" y="341" width="1.8072%" height="15" fill="rgb(223,20,43)" fg:x="152" fg:w="3"/><text x="91.8163%" y="351.50">&lt;..</text></g><g><title>core::str::iter::SplitNInternal&lt;P&gt;::next (3 samples, 1.81%)</title><rect x="91.5663%" y="325" width="1.8072%" height="15" fill="rgb(229,81,49)" fg:x="152" fg:w="3"/><text x="91.8163%" y="335.50">c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.60%)</title><rect x="92.7711%" y="309" width="0.6024%" height="15" fill="rgb(236,28,36)" fg:x="154" fg:w="1"/><text x="93.0211%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.60%)</title><rect x="92.7711%" y="293" width="0.6024%" height="15" fill="rgb(249,185,26)" fg:x="154" fg:w="1"/><text x="93.0211%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.60%)</title><rect x="92.7711%" y="277" width="0.6024%" height="15" fill="rgb(249,174,33)" fg:x="154" fg:w="1"/><text x="93.0211%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.60%)</title><rect x="92.7711%" y="261" width="0.6024%" height="15" fill="rgb(233,201,37)" fg:x="154" fg:w="1"/><text x="93.0211%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.60%)</title><rect x="92.7711%" y="245" width="0.6024%" height="15" fill="rgb(221,78,26)" fg:x="154" fg:w="1"/><text x="93.0211%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="92.7711%" y="229" width="0.6024%" height="15" fill="rgb(250,127,30)" fg:x="154" fg:w="1"/><text x="93.0211%" y="239.50"></text></g><g><title>day21::Yell::from_string (6 samples, 3.61%)</title><rect x="90.3614%" y="357" width="3.6145%" height="15" fill="rgb(230,49,44)" fg:x="150" fg:w="6"/><text x="90.6114%" y="367.50">day2..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.60%)</title><rect x="93.3735%" y="341" width="0.6024%" height="15" fill="rgb(229,67,23)" fg:x="155" fg:w="1"/><text x="93.6235%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.60%)</title><rect x="93.3735%" y="325" width="0.6024%" height="15" fill="rgb(249,83,47)" fg:x="155" fg:w="1"/><text x="93.6235%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.60%)</title><rect x="93.3735%" y="309" width="0.6024%" height="15" fill="rgb(215,43,3)" fg:x="155" fg:w="1"/><text x="93.6235%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.60%)</title><rect x="93.3735%" y="293" width="0.6024%" height="15" fill="rgb(238,154,13)" fg:x="155" fg:w="1"/><text x="93.6235%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.60%)</title><rect x="93.3735%" y="277" width="0.6024%" height="15" fill="rgb(219,56,2)" fg:x="155" fg:w="1"/><text x="93.6235%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.60%)</title><rect x="93.3735%" y="261" width="0.6024%" height="15" fill="rgb(233,0,4)" fg:x="155" fg:w="1"/><text x="93.6235%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.60%)</title><rect x="93.3735%" y="245" width="0.6024%" height="15" fill="rgb(235,30,7)" fg:x="155" fg:w="1"/><text x="93.6235%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.60%)</title><rect x="93.3735%" y="229" width="0.6024%" height="15" fill="rgb(250,79,13)" fg:x="155" fg:w="1"/><text x="93.6235%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.60%)</title><rect x="93.3735%" y="213" width="0.6024%" height="15" fill="rgb(211,146,34)" fg:x="155" fg:w="1"/><text x="93.6235%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.60%)</title><rect x="93.3735%" y="197" width="0.6024%" height="15" fill="rgb(228,22,38)" fg:x="155" fg:w="1"/><text x="93.6235%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.60%)</title><rect x="93.3735%" y="181" width="0.6024%" height="15" fill="rgb(235,168,5)" fg:x="155" fg:w="1"/><text x="93.6235%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.60%)</title><rect x="93.3735%" y="165" width="0.6024%" height="15" fill="rgb(221,155,16)" fg:x="155" fg:w="1"/><text x="93.6235%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.60%)</title><rect x="93.3735%" y="149" width="0.6024%" height="15" fill="rgb(215,215,53)" fg:x="155" fg:w="1"/><text x="93.6235%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.60%)</title><rect x="93.3735%" y="133" width="0.6024%" height="15" fill="rgb(223,4,10)" fg:x="155" fg:w="1"/><text x="93.6235%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.60%)</title><rect x="93.3735%" y="117" width="0.6024%" height="15" fill="rgb(234,103,6)" fg:x="155" fg:w="1"/><text x="93.6235%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::Yell&gt; (1 samples, 0.60%)</title><rect x="93.9759%" y="341" width="0.6024%" height="15" fill="rgb(227,97,0)" fg:x="156" fg:w="1"/><text x="94.2259%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;day21::YellOp&gt; (1 samples, 0.60%)</title><rect x="93.9759%" y="325" width="0.6024%" height="15" fill="rgb(234,150,53)" fg:x="156" fg:w="1"/><text x="94.2259%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.60%)</title><rect x="93.9759%" y="309" width="0.6024%" height="15" fill="rgb(228,201,54)" fg:x="156" fg:w="1"/><text x="94.2259%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.60%)</title><rect x="93.9759%" y="293" width="0.6024%" height="15" fill="rgb(222,22,37)" fg:x="156" fg:w="1"/><text x="94.2259%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.60%)</title><rect x="93.9759%" y="277" width="0.6024%" height="15" fill="rgb(237,53,32)" fg:x="156" fg:w="1"/><text x="94.2259%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.60%)</title><rect x="93.9759%" y="261" width="0.6024%" height="15" fill="rgb(233,25,53)" fg:x="156" fg:w="1"/><text x="94.2259%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.60%)</title><rect x="93.9759%" y="245" width="0.6024%" height="15" fill="rgb(210,40,34)" fg:x="156" fg:w="1"/><text x="94.2259%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.60%)</title><rect x="93.9759%" y="229" width="0.6024%" height="15" fill="rgb(241,220,44)" fg:x="156" fg:w="1"/><text x="94.2259%" y="239.50"></text></g><g><title>free (1 samples, 0.60%)</title><rect x="93.9759%" y="213" width="0.6024%" height="15" fill="rgb(235,28,35)" fg:x="156" fg:w="1"/><text x="94.2259%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="93.9759%" y="197" width="0.6024%" height="15" fill="rgb(210,56,17)" fg:x="156" fg:w="1"/><text x="94.2259%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.60%)</title><rect x="95.1807%" y="213" width="0.6024%" height="15" fill="rgb(224,130,29)" fg:x="158" fg:w="1"/><text x="95.4307%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 1.20%)</title><rect x="95.1807%" y="261" width="1.2048%" height="15" fill="rgb(235,212,8)" fg:x="158" fg:w="2"/><text x="95.4307%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 1.20%)</title><rect x="95.1807%" y="245" width="1.2048%" height="15" fill="rgb(223,33,50)" fg:x="158" fg:w="2"/><text x="95.4307%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 1.20%)</title><rect x="95.1807%" y="229" width="1.2048%" height="15" fill="rgb(219,149,13)" fg:x="158" fg:w="2"/><text x="95.4307%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.60%)</title><rect x="95.7831%" y="213" width="0.6024%" height="15" fill="rgb(250,156,29)" fg:x="159" fg:w="1"/><text x="96.0331%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 1.81%)</title><rect x="95.1807%" y="293" width="1.8072%" height="15" fill="rgb(216,193,19)" fg:x="158" fg:w="3"/><text x="95.4307%" y="303.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 1.81%)</title><rect x="95.1807%" y="277" width="1.8072%" height="15" fill="rgb(216,135,14)" fg:x="158" fg:w="3"/><text x="95.4307%" y="287.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.60%)</title><rect x="96.3855%" y="261" width="0.6024%" height="15" fill="rgb(241,47,5)" fg:x="160" fg:w="1"/><text x="96.6355%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.60%)</title><rect x="96.3855%" y="245" width="0.6024%" height="15" fill="rgb(233,42,35)" fg:x="160" fg:w="1"/><text x="96.6355%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.60%)</title><rect x="96.3855%" y="229" width="0.6024%" height="15" fill="rgb(231,13,6)" fg:x="160" fg:w="1"/><text x="96.6355%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.60%)</title><rect x="96.3855%" y="213" width="0.6024%" height="15" fill="rgb(207,181,40)" fg:x="160" fg:w="1"/><text x="96.6355%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.60%)</title><rect x="96.3855%" y="197" width="0.6024%" height="15" fill="rgb(254,173,49)" fg:x="160" fg:w="1"/><text x="96.6355%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.60%)</title><rect x="96.3855%" y="181" width="0.6024%" height="15" fill="rgb(221,1,38)" fg:x="160" fg:w="1"/><text x="96.6355%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.60%)</title><rect x="96.3855%" y="165" width="0.6024%" height="15" fill="rgb(206,124,46)" fg:x="160" fg:w="1"/><text x="96.6355%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.60%)</title><rect x="96.3855%" y="149" width="0.6024%" height="15" fill="rgb(249,21,11)" fg:x="160" fg:w="1"/><text x="96.6355%" y="159.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 3.01%)</title><rect x="94.5783%" y="341" width="3.0120%" height="15" fill="rgb(222,201,40)" fg:x="157" fg:w="5"/><text x="94.8283%" y="351.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 3.01%)</title><rect x="94.5783%" y="325" width="3.0120%" height="15" fill="rgb(235,61,29)" fg:x="157" fg:w="5"/><text x="94.8283%" y="335.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 3.01%)</title><rect x="94.5783%" y="309" width="3.0120%" height="15" fill="rgb(219,207,3)" fg:x="157" fg:w="5"/><text x="94.8283%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.60%)</title><rect x="96.9880%" y="293" width="0.6024%" height="15" fill="rgb(222,56,46)" fg:x="161" fg:w="1"/><text x="97.2380%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.60%)</title><rect x="96.9880%" y="277" width="0.6024%" height="15" fill="rgb(239,76,54)" fg:x="161" fg:w="1"/><text x="97.2380%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.60%)</title><rect x="96.9880%" y="261" width="0.6024%" height="15" fill="rgb(231,124,27)" fg:x="161" fg:w="1"/><text x="97.2380%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.60%)</title><rect x="96.9880%" y="245" width="0.6024%" height="15" fill="rgb(249,195,6)" fg:x="161" fg:w="1"/><text x="97.2380%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.60%)</title><rect x="96.9880%" y="229" width="0.6024%" height="15" fill="rgb(237,174,47)" fg:x="161" fg:w="1"/><text x="97.2380%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.60%)</title><rect x="96.9880%" y="213" width="0.6024%" height="15" fill="rgb(206,201,31)" fg:x="161" fg:w="1"/><text x="97.2380%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.60%)</title><rect x="96.9880%" y="197" width="0.6024%" height="15" fill="rgb(231,57,52)" fg:x="161" fg:w="1"/><text x="97.2380%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.60%)</title><rect x="96.9880%" y="181" width="0.6024%" height="15" fill="rgb(248,177,22)" fg:x="161" fg:w="1"/><text x="97.2380%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.60%)</title><rect x="96.9880%" y="165" width="0.6024%" height="15" fill="rgb(215,211,37)" fg:x="161" fg:w="1"/><text x="97.2380%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.60%)</title><rect x="96.9880%" y="149" width="0.6024%" height="15" fill="rgb(241,128,51)" fg:x="161" fg:w="1"/><text x="97.2380%" y="159.50"></text></g><g><title>day21::check_op_complete (7 samples, 4.22%)</title><rect x="93.9759%" y="357" width="4.2169%" height="15" fill="rgb(227,165,31)" fg:x="156" fg:w="7"/><text x="94.2259%" y="367.50">day21..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.60%)</title><rect x="97.5904%" y="341" width="0.6024%" height="15" fill="rgb(228,167,24)" fg:x="162" fg:w="1"/><text x="97.8404%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.60%)</title><rect x="97.5904%" y="325" width="0.6024%" height="15" fill="rgb(228,143,12)" fg:x="162" fg:w="1"/><text x="97.8404%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.60%)</title><rect x="97.5904%" y="309" width="0.6024%" height="15" fill="rgb(249,149,8)" fg:x="162" fg:w="1"/><text x="97.8404%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.60%)</title><rect x="97.5904%" y="293" width="0.6024%" height="15" fill="rgb(243,35,44)" fg:x="162" fg:w="1"/><text x="97.8404%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.60%)</title><rect x="97.5904%" y="277" width="0.6024%" height="15" fill="rgb(246,89,9)" fg:x="162" fg:w="1"/><text x="97.8404%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.60%)</title><rect x="97.5904%" y="261" width="0.6024%" height="15" fill="rgb(233,213,13)" fg:x="162" fg:w="1"/><text x="97.8404%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.60%)</title><rect x="97.5904%" y="245" width="0.6024%" height="15" fill="rgb(233,141,41)" fg:x="162" fg:w="1"/><text x="97.8404%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.60%)</title><rect x="97.5904%" y="229" width="0.6024%" height="15" fill="rgb(239,167,4)" fg:x="162" fg:w="1"/><text x="97.8404%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.60%)</title><rect x="97.5904%" y="213" width="0.6024%" height="15" fill="rgb(209,217,16)" fg:x="162" fg:w="1"/><text x="97.8404%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.60%)</title><rect x="97.5904%" y="197" width="0.6024%" height="15" fill="rgb(219,88,35)" fg:x="162" fg:w="1"/><text x="97.8404%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.60%)</title><rect x="97.5904%" y="181" width="0.6024%" height="15" fill="rgb(220,193,23)" fg:x="162" fg:w="1"/><text x="97.8404%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.60%)</title><rect x="97.5904%" y="165" width="0.6024%" height="15" fill="rgb(230,90,52)" fg:x="162" fg:w="1"/><text x="97.8404%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.60%)</title><rect x="97.5904%" y="149" width="0.6024%" height="15" fill="rgb(252,106,19)" fg:x="162" fg:w="1"/><text x="97.8404%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="97.5904%" y="133" width="0.6024%" height="15" fill="rgb(206,74,20)" fg:x="162" fg:w="1"/><text x="97.8404%" y="143.50"></text></g><g><title>std::panic::catch_unwind (125 samples, 75.30%)</title><rect x="24.0964%" y="485" width="75.3012%" height="15" fill="rgb(230,138,44)" fg:x="40" fg:w="125"/><text x="24.3464%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (125 samples, 75.30%)</title><rect x="24.0964%" y="469" width="75.3012%" height="15" fill="rgb(235,182,43)" fg:x="40" fg:w="125"/><text x="24.3464%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (125 samples, 75.30%)</title><rect x="24.0964%" y="453" width="75.3012%" height="15" fill="rgb(242,16,51)" fg:x="40" fg:w="125"/><text x="24.3464%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (125 samples, 75.30%)</title><rect x="24.0964%" y="437" width="75.3012%" height="15" fill="rgb(248,9,4)" fg:x="40" fg:w="125"/><text x="24.3464%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (125 samples, 75.30%)</title><rect x="24.0964%" y="421" width="75.3012%" height="15" fill="rgb(210,31,22)" fg:x="40" fg:w="125"/><text x="24.3464%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (125 samples, 75.30%)</title><rect x="24.0964%" y="405" width="75.3012%" height="15" fill="rgb(239,54,39)" fg:x="40" fg:w="125"/><text x="24.3464%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (125 samples, 75.30%)</title><rect x="24.0964%" y="389" width="75.3012%" height="15" fill="rgb(230,99,41)" fg:x="40" fg:w="125"/><text x="24.3464%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>day21::main (125 samples, 75.30%)</title><rect x="24.0964%" y="373" width="75.3012%" height="15" fill="rgb(253,106,12)" fg:x="40" fg:w="125"/><text x="24.3464%" y="383.50">day21::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 1.20%)</title><rect x="98.1928%" y="357" width="1.2048%" height="15" fill="rgb(213,46,41)" fg:x="163" fg:w="2"/><text x="98.4428%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 1.20%)</title><rect x="98.1928%" y="341" width="1.2048%" height="15" fill="rgb(215,133,35)" fg:x="163" fg:w="2"/><text x="98.4428%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.60%)</title><rect x="98.7952%" y="325" width="0.6024%" height="15" fill="rgb(213,28,5)" fg:x="164" fg:w="1"/><text x="99.0452%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.60%)</title><rect x="98.7952%" y="309" width="0.6024%" height="15" fill="rgb(215,77,49)" fg:x="164" fg:w="1"/><text x="99.0452%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.60%)</title><rect x="98.7952%" y="293" width="0.6024%" height="15" fill="rgb(248,100,22)" fg:x="164" fg:w="1"/><text x="99.0452%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.60%)</title><rect x="98.7952%" y="277" width="0.6024%" height="15" fill="rgb(208,67,9)" fg:x="164" fg:w="1"/><text x="99.0452%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="98.7952%" y="261" width="0.6024%" height="15" fill="rgb(219,133,21)" fg:x="164" fg:w="1"/><text x="99.0452%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="98.7952%" y="245" width="0.6024%" height="15" fill="rgb(246,46,29)" fg:x="164" fg:w="1"/><text x="99.0452%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.60%)</title><rect x="98.7952%" y="229" width="0.6024%" height="15" fill="rgb(246,185,52)" fg:x="164" fg:w="1"/><text x="99.0452%" y="239.50"></text></g><g><title>all (166 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(252,136,11)" fg:x="0" fg:w="166"/><text x="0.2500%" y="671.50"></text></g><g><title>day21 (166 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="166"/><text x="0.2500%" y="655.50">day21</text></g><g><title>_start (127 samples, 76.51%)</title><rect x="23.4940%" y="629" width="76.5060%" height="15" fill="rgb(211,51,23)" fg:x="39" fg:w="127"/><text x="23.7440%" y="639.50">_start</text></g><g><title>__libc_start_main (127 samples, 76.51%)</title><rect x="23.4940%" y="613" width="76.5060%" height="15" fill="rgb(247,221,28)" fg:x="39" fg:w="127"/><text x="23.7440%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (126 samples, 75.90%)</title><rect x="24.0964%" y="597" width="75.9036%" height="15" fill="rgb(251,222,45)" fg:x="40" fg:w="126"/><text x="24.3464%" y="607.50">[libc.so.6]</text></g><g><title>main (126 samples, 75.90%)</title><rect x="24.0964%" y="581" width="75.9036%" height="15" fill="rgb(217,162,53)" fg:x="40" fg:w="126"/><text x="24.3464%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (126 samples, 75.90%)</title><rect x="24.0964%" y="565" width="75.9036%" height="15" fill="rgb(229,93,14)" fg:x="40" fg:w="126"/><text x="24.3464%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (126 samples, 75.90%)</title><rect x="24.0964%" y="549" width="75.9036%" height="15" fill="rgb(209,67,49)" fg:x="40" fg:w="126"/><text x="24.3464%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (126 samples, 75.90%)</title><rect x="24.0964%" y="533" width="75.9036%" height="15" fill="rgb(213,87,29)" fg:x="40" fg:w="126"/><text x="24.3464%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (126 samples, 75.90%)</title><rect x="24.0964%" y="517" width="75.9036%" height="15" fill="rgb(205,151,52)" fg:x="40" fg:w="126"/><text x="24.3464%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (126 samples, 75.90%)</title><rect x="24.0964%" y="501" width="75.9036%" height="15" fill="rgb(253,215,39)" fg:x="40" fg:w="126"/><text x="24.3464%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.60%)</title><rect x="99.3976%" y="485" width="0.6024%" height="15" fill="rgb(221,220,41)" fg:x="165" fg:w="1"/><text x="99.6476%" y="495.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.60%)</title><rect x="99.3976%" y="469" width="0.6024%" height="15" fill="rgb(218,133,21)" fg:x="165" fg:w="1"/><text x="99.6476%" y="479.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.60%)</title><rect x="99.3976%" y="453" width="0.6024%" height="15" fill="rgb(221,193,43)" fg:x="165" fg:w="1"/><text x="99.6476%" y="463.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.60%)</title><rect x="99.3976%" y="437" width="0.6024%" height="15" fill="rgb(240,128,52)" fg:x="165" fg:w="1"/><text x="99.6476%" y="447.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.60%)</title><rect x="99.3976%" y="421" width="0.6024%" height="15" fill="rgb(253,114,12)" fg:x="165" fg:w="1"/><text x="99.6476%" y="431.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.60%)</title><rect x="99.3976%" y="405" width="0.6024%" height="15" fill="rgb(215,223,47)" fg:x="165" fg:w="1"/><text x="99.6476%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.60%)</title><rect x="99.3976%" y="389" width="0.6024%" height="15" fill="rgb(248,225,23)" fg:x="165" fg:w="1"/><text x="99.6476%" y="399.50"></text></g></svg></svg>